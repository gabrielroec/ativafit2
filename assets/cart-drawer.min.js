class CartDrawer{constructor(){this.drawer=null,this.overlay=null,this.isOpen=!1,this.cartData=null,this.init()}init(){this.createElements(),this.bindEvents(),this.updateCartCount()}createElements(){this.overlay=document.createElement("div"),this.overlay.className="cart-drawer-overlay",document.body.appendChild(this.overlay),this.drawer=document.createElement("div"),this.drawer.className="cart-drawer",this.drawer.innerHTML='\n      <div class="cart-drawer-header">\n        <h3 class="cart-drawer-title bold">Your Cart</h3>\n        <button class="cart-drawer-close">&times;</button>\n      </div>\n      <div class="cart-drawer-content">\n        <div class="cart-drawer-loading" style="padding: 40px; text-align: center;">\n          Loading...\n        </div>\n      </div>\n    ',document.body.appendChild(this.drawer)}bindEvents(){this.overlay.addEventListener("click",()=>this.close()),this.drawer.querySelector(".cart-drawer-close").addEventListener("click",()=>this.close()),document.addEventListener("click",t=>{(t.target.closest('a[href="/cart"]')||t.target.closest(".cart-icon"))&&(t.preventDefault(),this.open())}),document.addEventListener("submit",t=>{(t.target.matches(".product-card form")||t.target.closest(".product-card form"))&&(t.preventDefault(),this.addToCart(t.target))}),document.addEventListener("keydown",t=>{"Escape"===t.key&&this.isOpen&&this.close()})}async addToCart(t){const a=new FormData(t),n=t.closest(".product-card");let e=null;if(n){const t=n.querySelector(".discount-badge"),a=n.querySelector(".old-price"),r=n.querySelector(".current-price");if(t&&a&&r){const n=t.textContent.trim().match(/(\d+)%/),i=n?parseInt(n[1]):0,o=a.textContent.trim().replace(/[^0-9.]/g,""),s=r.textContent.trim().replace(/[^0-9.]/g,""),c=100*parseFloat(o),d=100*parseFloat(s);c>d&&(e={originalPrice:c,currentPrice:d,savings:c-d,percentage:i},console.log("Captured discount info from product card:",e))}}try{const t=await fetch("/cart/add.js",{method:"POST",body:a});if(t.ok){const a=await t.json();if(e){window.cartDiscountData||(window.cartDiscountData=new Map);const t=a.variant_id||a.id;window.cartDiscountData.set(t,e),console.log("Stored discount data for variant:",t,e)}await this.loadCartData(),this.updateCartCount(),this.open(),this.showAddedNotification(a)}else{const a=await t.json();this.showError(a.message||"Error adding product")}}catch(t){console.error("Cart add error:",t),this.showError("Error adding product")}}async loadCartData(){try{const t=await fetch("/cart.js");return this.cartData=await t.json(),this.renderCart(),this.cartData}catch(t){console.error("Error loading cart:",t),this.showError("Error loading cart")}}renderCart(){const t=this.drawer.querySelector(".cart-drawer-content");if(!this.cartData||0===this.cartData.item_count)return void(t.innerHTML='\n        <div class="cart-drawer-empty">\n          <div class="cart-drawer-empty-icon">\n            <svg viewBox="0 0 24 24" fill="currentColor">\n              <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>\n            </svg>\n          </div>\n          <div class="cart-drawer-empty-text regular">Your cart is empty</div>\n          <a href="/collections/all" class="cart-drawer-continue bold">Continue Shopping</a>\n        </div>\n      ');const a=this.cartData.items.map((t,a)=>this.renderCartItem(t,a+1)).join(""),n=this.renderDiscounts(),e=this.renderSavingsInfo();t.innerHTML=`\n      <div class="cart-drawer-items">\n        ${a}\n      </div>\n      <div class="cart-drawer-footer">\n        ${e}\n        ${n}\n        <div class="cart-drawer-subtotal">\n          <span class="bold">Subtotal</span>\n          <span class="bold">${this.formatMoney(this.cartData.total_price)}</span>\n        </div>\n        <div class="cart-drawer-actions">\n          <button class="cart-drawer-checkout bold" onclick="window.location.href='/checkout'">\n            Checkout\n          </button>\n          <button class="cart-drawer-view-cart bold" onclick="window.location.href='/cart'">View Cart</button>\n        </div>\n      </div>\n    `,this.bindCartEvents()}findDiscountData(t){if(window.cartDiscountData&&window.cartDiscountData.has(t.variant_id)){const a=window.cartDiscountData.get(t.variant_id);return console.log("Found stored discount data for variant:",t.variant_id,a),{hasDiscount:!0,originalPrice:a.originalPrice*t.quantity,currentPrice:t.final_line_price,savings:a.savings*t.quantity,method:"stored_from_product_card"}}if(console.log("No stored discount data found, checking cart object..."),t.total_discount>0){return{hasDiscount:!0,originalPrice:t.line_price+t.total_discount,currentPrice:t.final_line_price,savings:t.total_discount,method:"total_discount"}}if(t.original_price>t.price){const a=(t.original_price-t.price)*t.quantity;return{hasDiscount:!0,originalPrice:t.original_price*t.quantity,currentPrice:t.final_line_price,savings:a,method:"original_price"}}return{hasDiscount:!1,originalPrice:0,currentPrice:t.final_line_price,savings:0,method:"none"}}renderCartItem(t,a){const n=this.findDiscountData(t);return console.log(`Item: ${t.product_title} | Discount: ${n.hasDiscount?"YES":"NO"} | Method: ${n.method}`),`\n      <div class="cart-drawer-item" data-line="${a}">\n        <div class="cart-drawer-item-image">\n          ${t.image?`<img src="${t.image}" alt="${t.title}">`:'<div style="background: #f0f0f0;"></div>'}\n        </div>\n        <div class="cart-drawer-item-details">\n          <h4 class="cart-drawer-item-title bold">${t.product_title}</h4>\n          ${t.variant_title&&"Default Title"!==t.variant_title?`<p class="cart-drawer-item-variant regular">${t.variant_title}</p>`:""}\n          <div class="cart-drawer-item-price">\n            <span class="bold">${this.formatMoney(t.final_line_price)}</span>\n            ${n.hasDiscount?`<span class="compare-price regular">${this.formatMoney(n.originalPrice)}</span>`:""}\n          </div>\n          ${n.hasDiscount?`\n            <div class="cart-drawer-item-savings">\n              <span class="savings-text regular">You save ${this.formatMoney(n.savings)}</span>\n            </div>\n          `:""}\n          <div class="cart-drawer-quantity">\n            <button class="cart-drawer-quantity-btn" onclick="window.cartDrawer.updateQuantity(${a}, ${t.quantity-1})" ${t.quantity<=1?"disabled":""}>\n              -\n            </button>\n            <input type="number" class="cart-drawer-quantity-input" value="${t.quantity}" min="1" onchange="window.cartDrawer.updateQuantity(${a}, this.value)">\n            <button class="cart-drawer-quantity-btn" onclick="window.cartDrawer.updateQuantity(${a}, ${t.quantity+1})">\n              +\n            </button>\n          </div>\n          <button class="cart-drawer-remove regular" onclick="window.cartDrawer.removeItem(${a})">\n            Remove\n          </button>\n        </div>\n      </div>\n    `}renderDiscounts(){return this.cartData.cart_level_discount_applications&&0!==this.cartData.cart_level_discount_applications.length?this.cartData.cart_level_discount_applications.map(t=>`\n      <div class="cart-drawer-discount">\n        <span class="bold">${t.title}</span>\n        <span class="bold">-${this.formatMoney(t.total_allocated_amount)}</span>\n      </div>\n    `).join(""):""}renderSavingsInfo(){let t=0;return this.cartData.items.forEach((a,n)=>{const e=this.findDiscountData(a);t+=e.savings}),this.cartData.cart_level_discount_applications&&this.cartData.cart_level_discount_applications.forEach(a=>{t+=a.total_allocated_amount}),console.log("Total cart savings:",this.formatMoney(t)),t>0?`\n        <div class="cart-drawer-savings">\n          <div class="savings-banner">\n            <div class="savings-icon">ðŸŽ‰</div>\n            <div class="savings-content">\n              <div class="savings-title bold">You're saving with Ativafit!</div>\n              <div class="savings-amount bold">${this.formatMoney(t)} total savings</div>\n            </div>\n          </div>\n        </div>\n      `:""}bindCartEvents(){this.drawer.querySelectorAll(".cart-drawer-quantity-input").forEach(t=>{t.addEventListener("blur",t=>{parseInt(t.target.value)<1&&(t.target.value=1)})})}async updateQuantity(t,a){a=Math.max(1,parseInt(a));try{(await fetch("/cart/change.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({line:t,quantity:a})})).ok?(await this.loadCartData(),this.updateCartCount()):(console.error("Failed to update quantity"),this.showError("Failed to update quantity"))}catch(t){console.error("Error updating quantity:",t),this.showError("Error updating quantity")}}async removeItem(t){try{(await fetch("/cart/change.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({line:t,quantity:0})})).ok?(await this.loadCartData(),this.updateCartCount()):(console.error("Failed to remove item"),this.showError("Failed to remove item"))}catch(t){console.error("Error removing item:",t),this.showError("Error removing item")}}updateCartCount(){fetch("/cart.js").then(t=>t.json()).then(t=>{document.querySelectorAll(".cart-count, .header__cart-count").forEach(a=>{a.textContent=t.item_count,a.style.display=t.item_count>0?"block":"none"})}).catch(t=>console.error("Error updating cart count:",t))}formatMoney(t){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(t/100)}showAddedNotification(t){const a=document.createElement("div");a.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #4CAF50;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 10000;\n      font-size: 14px;\n      animation: slideIn 0.3s ease;\n      font-weight: 600;\n    ",a.innerHTML=`<span class="bold">${t.product_title} added to cart!</span>`,document.body.appendChild(a),setTimeout(()=>{a.remove()},3e3)}showError(t){const a=document.createElement("div");a.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #f44336;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      z-index: 10000;\n      font-size: 14px;\n      font-weight: 600;\n    ",a.innerHTML=`<span class="bold">${t}</span>`,document.body.appendChild(a),setTimeout(()=>{a.remove()},4e3)}async open(){this.cartData||await this.loadCartData(),this.isOpen=!0,this.overlay.classList.add("active"),this.drawer.classList.add("open"),document.body.style.overflow="hidden"}close(){this.isOpen=!1,this.overlay.classList.remove("active"),this.drawer.classList.remove("open"),document.body.style.overflow=""}}document.addEventListener("DOMContentLoaded",()=>{window.cartDrawer=new CartDrawer});const style=document.createElement("style");style.textContent="\n  @keyframes slideIn {\n    from { transform: translateX(100%); opacity: 0; }\n    to { transform: translateX(0); opacity: 1; }\n  }\n",document.head.appendChild(style);