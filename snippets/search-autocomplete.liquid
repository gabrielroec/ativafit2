{%- comment -%} 
  Search Autocomplete Component
   
  Usage: {% render 'search-autocomplete' %}
   
  Features: 
  - Real-time product search 
  - Product tiles with image and price 
  - Keyboard navigation 
  - Mobile responsive 
  - Debounced API calls 
{%- endcomment -%}

<div class="search-autocomplete" id="search-autocomplete">
  <div class="search-autocomplete__input-wrapper">
    <input
      type="text"
      class="search-autocomplete__input"
      id="search-autocomplete-input"
      placeholder="Search products..."
      autocomplete="off"
      aria-expanded="false"
      aria-haspopup="listbox"
      aria-label="Search products">

    <button
      type="button"
      class="search-autocomplete__clear"
      id="search-autocomplete-clear"
      aria-label="Clear search"
      style="display: none;">
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none">
        <path
          d="M12 4L4 12M4 4L12 12"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round" />
      </svg>
    </button>

    <button
      type="submit"
      class="search-autocomplete__submit"
      aria-label="Submit search">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none">
        <path
          d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round" />
      </svg>
    </button>
  </div>

  <div
    class="search-autocomplete__results"
    id="search-autocomplete-results"
    role="listbox"
    aria-label="Search results">

    <div class="search-autocomplete__loading" id="search-autocomplete-loading">
      <div class="search-autocomplete__spinner"></div>
      <span>Searching...</span>
    </div>

    <div class="search-autocomplete__content" id="search-autocomplete-content">
      <!-- Results will be populated here -->
    </div>

    <div class="search-autocomplete__no-results" id="search-autocomplete-no-results">
      <svg
        width="48"
        height="48"
        viewBox="0 0 24 24"
        fill="none">
        <path
          d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round" />
      </svg>
      <p>No products found</p>
      <span>Try different keywords</span>
    </div>
  </div>
</div>

<style>
  .search-autocomplete {
    position: relative;
    width: 100%;
    max-width: 100%;
  }

  .search-autocomplete__input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: #fff;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }

  .search-autocomplete__input-wrapper:focus-within {
    border-color: #eb701f;
    box-shadow: 0 0 0 3px rgba(235, 112, 31, 0.1);
  }

  .search-autocomplete__input {
    flex: 1;
    padding: 16px 20px;
    border: none;
    outline: none;
    font-size: 16px;
    font-family: 'Barlow'
    , sans-serif;
    background: transparent;
    color: #111827;
  }

  .search-autocomplete__input::placeholder {
    color: #9ca3af;
  }

  .search-autocomplete__clear,
  .search-autocomplete__submit {
    background: none;
    border: none;
    padding: 12px;
    cursor: pointer;
    color: #6b7280;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-autocomplete__clear:hover,
  .search-autocomplete__submit:hover {
    color: #eb701f;
    transform: scale(1.1);
  }

  .search-autocomplete__submit {
    background: #eb701f;
    color: #fff;
    border-radius: 8px;
    margin: 4px;
  }

  .search-autocomplete__submit:hover {
    background: #d65b0f;
    color: #fff;
    transform: scale(1.05);
  }

  .search-autocomplete__results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 400px;
    overflow-y: auto;
    margin-top: 8px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .search-autocomplete__results.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .search-autocomplete__loading {
    display: none;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 24px;
    color: #6b7280;
  }

  .search-autocomplete__loading.show {
    display: flex;
  }

  .search-autocomplete__spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #e5e7eb;
    border-top: 2px solid #eb701f;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .search-autocomplete__content {
    padding: 8px;
  }

  .search-autocomplete__product {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    border-radius: 8px;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .search-autocomplete__product:hover,
  .search-autocomplete__product.highlighted {
    background: #f9fafb;
    transform: translateX(4px);
  }

  .search-autocomplete__product-image {
    width: 120px;
    height: 120px;
    border-radius: 8px;
    overflow: hidden;
    background: #f3f4f6;
    flex-shrink: 0;
  }

  .search-autocomplete__product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .search-autocomplete__product-info {
    flex: 1;
    min-width: 0;
  }

  .search-autocomplete__product-title {
    font-size: 14px;
    font-weight: 600;
    color: #111827;
    margin: 0 0 4px;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .search-autocomplete__product-price {
    font-size: 14px;
    font-weight: 600;
    color: #eb701f;
  }

  .search-autocomplete__product-compare-price {
    font-size: 12px;
    color: #9ca3af;
    text-decoration: line-through;
    margin-left: 8px;
  }

  .search-autocomplete__no-results {
    display: none;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px 20px;
    text-align: center;
    color: #6b7280;
  }

  .search-autocomplete__no-results.show {
    display: flex;
  }

  .search-autocomplete__no-results svg {
    margin-bottom: 16px;
    opacity: 0.5;
  }

  .search-autocomplete__no-results p {
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 4px;
    color: #374151;
  }

  .search-autocomplete__no-results span {
    font-size: 14px;
    color: #9ca3af;
  }

  /* Mobile Styles */
  @media screen and (max-width: 768px) {
    .search-autocomplete {
      max-width: 100%;
    }

    .search-autocomplete__input {
      padding: 14px 16px;
      font-size: 16px;
      /* Prevents zoom on iOS */
    }

    .search-autocomplete__results {
      max-height: 300px;
    }

    .search-autocomplete__product {
      padding: 10px;
    }

    .search-autocomplete__product-image {
      width: 50px;
      height: 50px;
    }

    .search-autocomplete__product-title {
      font-size: 13px;
    }

    .search-autocomplete__product-price {
      font-size: 13px;
    }
  }
</style>

<script>
  class SearchAutocomplete {
  constructor() {
    this.input = document.getElementById('search-autocomplete-input');
    this.clearBtn = document.getElementById('search-autocomplete-clear');
    this.submitBtn = document.getElementById('search-autocomplete-submit');
    this.results = document.getElementById('search-autocomplete-results');
    this.loading = document.getElementById('search-autocomplete-loading');
    this.content = document.getElementById('search-autocomplete-content');
    this.noResults = document.getElementById('search-autocomplete-no-results');
    
    this.debounceTimer = null;
    this.currentQuery = '';
    this.selectedIndex = -1;
    this.products = [];
    
    this.init();
  }
  
  init() {
    if (!this.input) return;
  
    // Input events
    this.input.addEventListener('input', (e) => this.handleInput(e));
    this.input.addEventListener('focus', () => this.handleFocus());
    this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
  
    // Clear button
    this.clearBtn?.addEventListener('click', () => this.clearSearch());
  
    // Submit button
    this.submitBtn?.addEventListener('click', () => this.handleSubmit());
  
    // Click outside to close
    document.addEventListener('click', (e) => this.handleClickOutside(e));
  
    // Form submission
    const form = this.input.closest('form');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
    }
  }
  
  handleInput(e) {
    const query = e.target.value.trim();
    this.currentQuery = query;
  
    // Show/hide clear button
    if (this.clearBtn) {
      this.clearBtn.style.display = query ? 'flex' : 'none';
    }
  
    // Clear previous timer
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }
  
    if (query.length < 2) {
      this.hideResults();
      return;
    }
  
    // Debounce search
    this.debounceTimer = setTimeout(() => {
      this.searchProducts(query);
    }, 300);
  }
  
  handleFocus() {
    if (this.currentQuery.length >= 2 && this.products.length > 0) {
      this.showResults();
    }
  }
  
  handleKeydown(e) {
    if (!this.results.classList.contains('show')) return;
  
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        this.navigateDown();
        break;
      case 'ArrowUp':
        e.preventDefault();
        this.navigateUp();
        break;
      case 'Enter':
        e.preventDefault();
        this.selectCurrent();
        break;
      case 'Escape':
        this.hideResults();
        this.input.blur();
        break;
    }
  }
  
  handleClickOutside(e) {
    if (!e.target.closest('.search-autocomplete')) {
      this.hideResults();
    }
  }
  
  handleSubmit() {
    if (this.selectedIndex >= 0 && this.products[this.selectedIndex]) {
      // Navigate to selected product
      window.location.href = this.products[this.selectedIndex].url;
    } else if (this.currentQuery) {
      // Navigate to search results
      window.location.href = `/search?q=${encodeURIComponent(this.currentQuery)}`;
    }
  }
  
  async searchProducts(query) {
    this.showLoading();

    try {
      // 1) Predictive Search para obter handles
      const suggestUrl = `/search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product&resources[limit]=8`;
      const suggestResponse = await fetch(suggestUrl, { credentials: 'same-origin' });
      
      if (!suggestResponse.ok) {
        throw new Error('Suggest failed');
      }

      const data = await suggestResponse.json();
      const rawProducts = data?.resources?.results?.products || [];
      
      // Garante unicidade por handle (evita duplicados)
      const byHandle = new Map();
      rawProducts.forEach(p => { 
        if (p && p.handle) byHandle.set(p.handle, p); 
      });

      // 2) Enriquecer com /products/<handle>.js (preço/compare/imagens consistentes)
      const enriched = await Promise.all(
        Array.from(byHandle.keys()).map(async (handle) => {
          try {
            const productResponse = await fetch(`/products/${handle}.js`, { credentials: 'same-origin' });
            
            if (!productResponse.ok) {
              console.warn(`Failed to fetch product data for ${handle}`);
              return null;
            }
            
            const productData = await productResponse.json();

            // Preço: pegue do variant "mais barato" (ou o primeiro disponível)
            const variants = productData?.variants || [];
            const available = variants.filter(v => v.available);
            const variant = (available.length ? available : variants)[0];

            if (!variant) {
              console.warn(`No variants found for ${handle}`);
              return null;
            }

            // Imagem destaque
            const imageUrl = productData?.images && productData.images.length > 0
              ? productData.images[0]
              : (byHandle.get(handle)?.featured_image?.url || null);

            return {
              title: productData?.title || byHandle.get(handle)?.title || '',
              url: productData?.url || `/products/${handle}`,
              image: imageUrl,
              priceCents: variant.price || 0, // já vem em centavos
              compareAtCents: variant.compare_at_price || 0,
              available: variant.available
            };
          } catch (err) {
            console.error(`Error enriching product ${handle}:`, err);
            return null;
          }
        })
      );

      this.products = enriched.filter(Boolean);
      this.renderResults(this.products);
      
    } catch (error) {
      console.error('Search error:', error);
      this.showNoResults();
    }
  }
  
  renderResults(products) {
    this.hideLoading();

    if (products.length === 0) {
      this.showNoResults();
      return;
    }

    const money = (cents) => {
      // Use Shopify.formatMoney se existir para respeitar moeda/locale da loja
      if (window.Shopify && typeof window.Shopify.formatMoney === 'function') {
        return window.Shopify.formatMoney(cents, window.Shopify.money_format || '${{amount}}');
      }
      // fallback
      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' })
        .format((cents || 0) / 100);
    };

    const html = products.map((product, index) => {
      // Imagem com width parameter
      const imgUrl = product.image
        ? (product.image.includes('?') ? `${product.image}&width=120&height=120&crop=center` : `${product.image}?width=120&height=120&crop=center`)
        : null;

      const hasCompare = product.compareAtCents && product.compareAtCents > product.priceCents;

      return `
        <a href="${product.url}" class="search-autocomplete__product" data-index="${index}">
          <div class="search-autocomplete__product-image">
            ${
              imgUrl
                ? `<img src="${imgUrl}" alt="${(product.title || '').replace(/"/g, '&quot;')}" loading="lazy">`
                : '<div style="background:#f3f4f6;width:100%;height:100%;"></div>'
            }
          </div>
          <div class="search-autocomplete__product-info">
            <h3 class="search-autocomplete__product-title">${product.title}</h3>
            <div class="search-autocomplete__product-price">
              ${money(product.priceCents)}
              ${hasCompare ? `<span class="search-autocomplete__product-compare-price">${money(product.compareAtCents)}</span>` : ''}
            </div>
          </div>
        </a>
      `;
    }).join('');

    this.content.innerHTML = html;
    this.showResults();
    this.selectedIndex = -1;

    // Add click handlers
    this.content.querySelectorAll('.search-autocomplete__product').forEach((item, index) => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        window.location.href = products[index].url;
      });
    });
  }
  
  navigateDown() {
    this.selectedIndex = Math.min(this.selectedIndex + 1, this.products.length - 1);
    this.updateHighlight();
  }
  
  navigateUp() {
    this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
    this.updateHighlight();
  }
  
  updateHighlight() {
    const items = this.content.querySelectorAll('.search-autocomplete__product');
    items.forEach((item, index) => {
      item.classList.toggle('highlighted', index === this.selectedIndex);
    });
  }
  
  selectCurrent() {
    if (this.selectedIndex >= 0 && this.products[this.selectedIndex]) {
      window.location.href = this.products[this.selectedIndex].url;
    } else {
      this.handleSubmit();
    }
  }
  
  clearSearch() {
    this.input.value = '';
    this.currentQuery = '';
    this.hideResults();
    this.clearBtn.style.display = 'none';
    this.input.focus();
  }
  
  showLoading() {
    this.loading.classList.add('show');
    this.content.style.display = 'none';
    this.noResults.classList.remove('show');
    this.results.classList.add('show');
  }
  
  hideLoading() {
    this.loading.classList.remove('show');
    this.content.style.display = 'block';
  }
  
  showResults() {
    this.results.classList.add('show');
    this.input.setAttribute('aria-expanded', 'true');
    // O scroll já está bloqueado pelo overlay no header
  }
  
  hideResults() {
    this.results.classList.remove('show');
    this.input.setAttribute('aria-expanded', 'false');
    this.selectedIndex = -1;
    // O scroll será restaurado quando o overlay fechar
  }
  
  showNoResults() {
    this.hideLoading();
    this.content.style.display = 'none';
    this.noResults.classList.add('show');
    this.results.classList.add('show');
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => new SearchAutocomplete());
} else {
  new SearchAutocomplete();
}
</script>