{%- comment -%} 
                                                                                                                            Salve este arquivo como /snippets/product-card.liquid
                                                                                                                            Inclua na sua coleção ou em qualquer template assim: 
                                                                                                                            {% render 'product-card', product: product %} 
{%- endcomment -%}

{% comment %}Debug info{% endcomment %}
<!--
  Product Title: {{ product.title }}  Product Handle: {{ product.handle }}  Product Available: {{ product.available }}  Product Price: {{ product.price }}  Product Compare Price: {{ product.compare_at_price_max }}  Product Featured Image: {{ product.featured_image }}  Product First Available Variant: {{ product.selected_or_first_available_variant.id }}
-->
{% if product != blank %}
  <a href="{{ product.url }}" class="product-card">
    {%- comment -%} — ESTILO (inline para simplificar) {%- endcomment -%}
    <style>
      .product-card {
        position: relative;
        width: 100%;
        max-width: 300px;
        height: 480px;
        background: #fff;
        border-radius: 0;
        border: 1px solid #D9D9D9;
        overflow: hidden;
        transition: transform 0.3s;
        font-family: "Barlow"
        , sans-serif;
        text-decoration: none;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
      }

      .product-card:hover {
        transform: translateY(-5px);
      }

      .product-card img {
        width: 100%;
        height: 334px;
        display: block;
        object-fit: contain;
        background-image: linear-gradient(to top, #f9f9f9 0, #fff 100%);
        flex-shrink: 0;
      }

      .discount-badge {
        position: absolute;
        top: 16px;
        left: 16px;
        background: #EB701F;
        color: #fff;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 400;
      }

      .static-info {
        padding: 16px;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      .product-title-card-custom {
        font-size: 18px !important;
        font-weight: 700 !important;
        line-height: 1.2;
        font-weight: bold;
        color: #000;
        margin: 0 0 8px !important;
        flex: 1;
      }

      .price {
        font-size: 16px;
      }

      .current-price {
        color: #EB701F;
        font-weight: bold;
      }

      .old-price {
        color: #D9D9D9;
        text-decoration: line-through;
      }

      /* CONTROLES DESKTOP */
      .controls {
        display: none;
        position: absolute;
        bottom: 150px;
        left: 50%;
        transform: translateX(-50%);
        width: calc(100% - 32px);
        background: #fff;
        border: 1px solid #EB701F;
        border-radius: 8px;
        padding: 4px;
        box-sizing: border-box;
        justify-content: space-between;
        align-items: stretch;
        gap: 10px;
        opacity: 0;
        transition: opacity 0.3s ease
        , transform 0.3s ease;
      }

      .product-card:hover .controls {
        display: flex;
        align-items: stretch;
        gap: 4px;
        opacity: 1;
        transform: translateX(-50%) translateY(0);
        animation: slideUp 0.3s ease forwards;
      }

      .buy-btn {
        color: #EB701F;
        background: transparent;
        font-weight: 600;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        width: 100%;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        transform: scale(0.95);
        opacity: 0.8;
      }

      .buy-btn::after {
        content: '';
        position: absolute;
        bottom: 15px;
        left: 50%;
        width: 0;
        height: 2px;
        background: #EB701F;
        transform: translateX(-50%);
        transition: width 0.3s ease;
      }

      .product-card:hover .buy-btn {
        color: #c23d12;
        transform: scale(1);
        opacity: 1;
      }

      .product-card:hover .buy-btn::after {
        width: 50%;
        background: #c23d12;
      }

      .quantity {
        font-size: 16px;
        user-select: none;
        color: #EB701F;
        width: 100%;
        border: 1px solid #EB701F;
        display: flex;
        align-items: center;
        border-radius: 4px;
        justify-content: center;
        gap: 10px;
      }

      .quantity span {
        cursor: pointer;
        padding: 0;
      }

      .quantity .qty {
        width: 20px;
        text-align: center;
      }

      /* CONTROLES MOBILE */
      .mobile-controls {
        display: none;
      }

      .mobile-btn {
        width: 100%;
        background: #EB701F;
        color: #fff;
        border-radius: 4px;
        padding: 10px;
        font-size: 14px;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .mobile-btn:hover {
        background: #d65b0f;
      }

      /* VARIANT SELECTOR */
      .variant-selector {
        margin-bottom: 8px;
      }

      .variant-options {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-top: 4px;
      }

      .variant-option {
        position: relative;
      }

      .variant-option input[type="radio"] {
        position: absolute;
        opacity: 0;
        cursor: pointer;
      }

      .variant-option label {
        display: inline-block;
        padding: 4px 8px;
        background: #f8f8f8;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 600;
        color: #666;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
        min-width: 20px;
        text-align: center;
        line-height: 1.2;
      }

      .variant-option label:hover {
        border-color: #EB701F;
        background: #fff5f0;
      }

      .variant-option input[type="radio"]:checked + label {
        background: #EB701F;
        color: white;
        border-color: #EB701F;
      }

      .variant-option input[type="radio"]:disabled + label {
        background: #f0f0f0;
        color: #ccc;
        border-color: #eee;
        cursor: not-allowed;
        text-decoration: line-through;
      }

      .variant-option input[type="radio"]:disabled + label:hover {
        background: #f0f0f0;
        border-color: #eee;
      }

      /* ANIMAÇÕES */
      @keyframes slideUp {
        0% {
          opacity: 0;
          transform: translateX(-50%) translateY(10px);
        }
        100% {
          opacity: 1;
          transform: translateX(-50%) translateY(0);
        }
      }

      /* MEDIA QUERIES */
      @media screen and (max-width: 768px) {
        .product-card {
          height: 530px !important;
          display: flex;
          flex-direction: column;
        }

        .product-card:hover {
          transform: none !important;
        }

        .product-card img {
          height: 250px;
          flex-shrink: 0;
        }

        .static-info {
          padding: 12px;
          flex: 1;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }

        .product-title-card-custom {
          font-size: 14px;
          margin-bottom: 10px;
          flex: 0.5;
          display: flex;
          align-items: flex-start;
          min-height: fit-content;
        }

        .variant-selector {
          margin-bottom: 6px;
        }

        .variant-options {
          gap: 4px;
        }

        .variant-option label {
          font-size: 10px;
          padding: 3px 6px;
        }

        .price {
          font-size: 14px;
          margin-bottom: 10px;
          flex-shrink: 0;
          min-height: fit-content !important;
          display: flex;
          flex-direction: row;
          justify-content: flex-start;
          gap: 10px;
        }

        /* Esconder completamente controles desktop */
        .controls,
        .desktop-form {
          display: none !important;
          opacity: 0 !important;
          visibility: hidden !important;
        }

        .product-card:hover .controls,
        .product-card:hover .desktop-form {
          display: none !important;
          opacity: 0 !important;
          visibility: hidden !important;
        }

        /* Remover todos os efeitos hover */
        .buy-btn,
        .buy-btn:hover,
        .product-card:hover .buy-btn {
          transform: none !important;
          opacity: 1 !important;
          color: inherit !important;
          background: transparent !important;
        }

        .buy-btn::after,
        .product-card:hover .buy-btn::after {
          display: none !important;
        }

        .mobile-controls {
          display: block;
          margin-top: 10px;
          flex-shrink: 0;
        }

        .mobile-btn {
          height: 40px;
          display: flex;
          align-items: center;
          justify-content: center;
        }
      }


      /*
   @media screen and (max-width: 480px) {
   {%- if request.page_type == 'collection' -%}
   .product-card {
   height: 500px !important;
   max-width: none;
   }

   .product-card img {
   height: 220px;
   }

   .static-info {
   padding: 10px;
   }

   .product-title {
   font-size: 13px;
   margin-bottom: 6px;
   }

   .price {
   font-size: 13px;
   }

   .mobile-btn {
   padding: 8px;
   font-size: 13px;
   }
   {%- else -%}
   .product-card {
   height: 440px;
   max-width: 250px !important;
   margin: 0 auto;
   }

   .product-card img {
   height: 220px;
   }
   {%- endif -%}
   }
*/
    </style>

    {%- comment -%} — BADGE DE DESCONTO - Sempre calculado baseado na diferença entre preço original e atual {%- endcomment -%}
    {% if product.compare_at_price_max > product.price %}
      {% assign discount_amount = product.compare_at_price_max | minus: product.price %}
      {% assign discount_percentage = discount_amount | times: 100.0 | divided_by: product.compare_at_price_max | round %}
      <div class="discount-badge condensed-bold">{{ discount_percentage }}% OFF</div>
    {% endif %}

    {%- comment -%} — IMAGEM DO PRODUTO {%- endcomment -%}
    {% if product.featured_image != blank %}
      <img
        src="{{ product.featured_image | img_url: '600x600' }}"
        alt="{{ product.title }}"
        width="600"
        height="600"
        loading="lazy">
    {% else %}
      <div style="width: 100%; height: 334px; background: #f4f4f4; display: flex; align-items: center; justify-content: center;">
        <span style="color: #999;">Imagem não disponível</span>
      </div>
    {% endif %}

    {%- comment -%} — CONTROLES DE COMPRA DESKTOP (hover) {%- endcomment -%}
    {% if product.available and product.selected_or_first_available_variant != blank %}
      <form
        action="/cart/add"
        method="post"
        class="controls desktop-form"
        data-product-id="{{ product.id }}"
        onclick="event.stopPropagation();">
        <input
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}"
          class="variant-id-input">
        <input
          type="hidden"
          name="quantity"
          value="1"
          class="quantity-input">
        <button type="submit" class="buy-btn">{{ section.settings.buy_btn_text | default: 'BUY NOW' }}</button>
        <div class="quantity">
          <span class="minus">-</span>
          <span class="qty">1</span>
          <span class="plus">+</span>
        </div>
      </form>
    {% endif %}

    {%- comment -%} — TÍTULO E PREÇOS (sempre visíveis) {%- endcomment -%}
    <div class="static-info">
      <p class="product-title-card-custom bold">{{ product.title }}</p>

      {%- comment -%} — SELETOR DE VARIANTES {%- endcomment -%}
      {% if product.variants.size > 1 %}
        <div class="variant-selector">
          <div class="variant-options">
            {% for variant in product.variants %}
              <div class="variant-option">
                <input
                  type="radio"
                  id="variant-{{ variant.id }}-{{ product.id }}"
                  name="variant-{{ product.id }}"
                  value="{{ variant.id }}"
                  data-price="{{ variant.price }}"
                  data-compare-at-price="{{ variant.compare_at_price | default: 0 }}"
                  data-available="{{ variant.available }}"
                  data-image="{% if variant.featured_image %}{{ variant.featured_image | img_url: '600x600' }}{% endif %}"
                  {% if variant.id == product.selected_or_first_available_variant.id %}
                  checked{% endif %}
                  {% unless variant.available %}
                  disabled{% endunless %}
                  onclick="event.stopPropagation(); updateVariant(this)">
                <label class="regular" for="variant-{{ variant.id }}-{{ product.id }}">{{ variant.title }}</label>
              </div>
            {% endfor %}
          </div>
        </div>
      {% endif %}

      <div class="price" data-product-id="{{ product.id }}">
        {% assign current_variant = product.selected_or_first_available_variant %}
        {% if current_variant.price > 0 %}
          <span class="current-price bold">{{ current_variant.price | money }}</span>
          {% if current_variant.compare_at_price and current_variant.compare_at_price > current_variant.price %}
            <span class="old-price bold">{{ current_variant.compare_at_price | money }}</span>
          {% endif %}
        {% else %}
          <span class="current-price">Price not available</span>
        {% endif %}
      </div>

      {%- comment -%} — Botão mobile dentro do static-info {%- endcomment -%}
      {% if product.available and product.selected_or_first_available_variant != blank %}
        <form
          action="/cart/add"
          method="post"
          class="mobile-controls"
          data-product-id="{{ product.id }}"
          onclick="event.stopPropagation();">
          <input
            type="hidden"
            name="id"
            value="{{ product.selected_or_first_available_variant.id }}"
            class="variant-id-input">
          <input
            type="hidden"
            name="quantity"
            value="1">
          <button type="submit" class="mobile-btn">SHOP NOW</button>
        </form>
      {% endif %}
    </div>
  </a>

  {%- comment -%} — JS PARA CONTADOR E VARIANTES — mantém simples e isolado por produto {%- endcomment -%}
  <script>
    // Function to update variant (global scope)
    window.updateVariant = function(radioElement) {
      const variantId = radioElement.value;
      const price = parseInt(radioElement.dataset.price);
      const compareAtPrice = parseInt(radioElement.dataset.compareAtPrice) || 0;
      const available = radioElement.dataset.available === 'true';
      const image = radioElement.dataset.image;
      
      // Find the product card
      const productCard = radioElement.closest('.product-card');
      if (!productCard) return;
      
      // Update variant ID in all forms
      const variantInputs = productCard.querySelectorAll('.variant-id-input');
      variantInputs.forEach(input => {
        input.value = variantId;
      });
      
      // Update price display
      const priceContainer = productCard.querySelector('.price');
      if (priceContainer) {
        const formatMoney = (cents) => {
          return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
          }).format(cents / 100);
        };
        
        let priceHTML = `<span class="current-price bold">${formatMoney(price)}</span>`;
        
        if (compareAtPrice > price) {
          priceHTML += `<span class="old-price bold">${formatMoney(compareAtPrice)}</span>`;
        }
        
        priceContainer.innerHTML = priceHTML;
      }
      
      // Update discount badge
      const discountBadge = productCard.querySelector('.discount-badge');
      if (compareAtPrice > price) {
        const discountPercent = Math.round(((compareAtPrice - price) / compareAtPrice) * 100);
        if (discountBadge) {
          discountBadge.innerHTML = `${discountPercent}% OFF`;
          discountBadge.style.display = 'block';
        } else {
          // Create discount badge if it doesn't exist
          const badge = document.createElement('div');
          badge.className = 'discount-badge condensed-bold';
          badge.innerHTML = `${discountPercent}% OFF`;
          productCard.appendChild(badge);
        }
      } else {
        if (discountBadge) {
          discountBadge.style.display = 'none';
        }
      }
      
      // Update product image if variant has specific image
      if (image) {
        const productImage = productCard.querySelector('img');
        if (productImage) {
          productImage.src = image;
        }
      }
      
      // Update button states based on availability
      const buttons = productCard.querySelectorAll('.buy-btn, .mobile-btn');
      buttons.forEach(button => {
        if (available) {
          button.disabled = false;
          button.textContent = button.classList.contains('mobile-btn') ? 'SHOP NOW' : 'BUY NOW';
          button.style.opacity = '1';
        } else {
          button.disabled = true;
          button.textContent = 'SOLD OUT';
          button.style.opacity = '0.6';
        }
      });
    };

    document.addEventListener('DOMContentLoaded', function() {
      const productCards = document.querySelectorAll('.product-card');
      
      productCards.forEach(card => {
        const form = card.querySelector('form');
        if (!form) return;
        
        // Previne que o clique no formulário propague para o card
        form.addEventListener('click', function(e) {
          e.stopPropagation();
        });
        
        const quantityInput = form.querySelector('input[name="quantity"]');
        const qtyDisplay = form.querySelector('.qty');
        const plusButton = form.querySelector('.plus');
        const minusButton = form.querySelector('.minus');
        
        if (!plusButton || !minusButton) return;
        
        let quantity = 1;
        
        plusButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          quantity++;
          updateQuantity();
        });
        
        minusButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (quantity > 1) {
            quantity--;
            updateQuantity();
          }
        });
        
        function updateQuantity() {
          if (quantityInput) quantityInput.value = quantity;
          if (qtyDisplay) qtyDisplay.textContent = quantity;
        }

        // Intercepta o envio do formulário para mostrar notificação
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          // Previne múltiplas execuções simultâneas
          if (form.dataset.processing === 'true') {
            console.log("Form already being processed, skipping duplicate submission");
            return;
          }
          
          // Adiciona proteção adicional com timestamp
          const now = Date.now();
          if (form.dataset.lastSubmission && (now - parseInt(form.dataset.lastSubmission)) < 2000) {
            console.log("Form submitted too recently, skipping duplicate submission");
            return;
          }
          form.dataset.lastSubmission = now.toString();
          
          console.log("Product-card-custom.liquid intercepted form submission");
          
          // Marca o formulário como processando e já processado
          form.dataset.processing = 'true';
          form.dataset.handledByProductCard = 'true';
          
          const submitButton = form.querySelector('button[type="submit"]');
          const originalText = submitButton.textContent;
          const productTitle = card.querySelector('.product-title')?.textContent || 'Product';
          
          // Desabilita o botão e mostra loading
          submitButton.disabled = true;
          submitButton.textContent = 'Adding...';
          
          try {
            const formData = new FormData(form);
            
            console.log("Sending to cart:", {
              variantId: formData.get('id'),
              quantity: formData.get('quantity'),
              productTitle: productTitle
            });
            
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              body: formData
            });
            
            if (response.ok) {
              const result = await response.json();
              
              // Atualiza contador do carrinho
              const cartData = await fetch('/cart.js').then(res => res.json());
              const cartCountElement = document.querySelector('.header__cart-count');
              if (cartCountElement) {
                cartCountElement.textContent = cartData.item_count;
              }
              
              // Atualiza o cart drawer se estiver disponível
              if (window.cartDrawer) {
                await window.cartDrawer.loadCartData();
                window.cartDrawer.updateCartCount();
                window.cartDrawer.updateRecommendedSection();
              }
              
              // Mostra notificação de sucesso PRIMEIRO
              if (window.CartNotification) {
                window.CartNotification.success({
                  title: "Product Added!",
                  message: 'Join <a href="https://www.ativafit.com/pages/ativapeople-rewards-program" target="_blank" style="color: #eb701f; text-decoration: underline; font-weight: bold;">AtivaPeople</a> & get 10% off your first order.',
                  type: "success"
                });
              }
              
              // Aguarda a notificação aparecer e depois abre o cart drawer
              setTimeout(() => {
                if (window.cartDrawer) {
                  window.cartDrawer.open();
                } else if (window.theme && window.theme.miniCart) {
                  window.theme.miniCart.open();
                }
              }, 300);
              
              // Remove o estado "Adding..." após notificação aparecer
              setTimeout(() => {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                // Remove as marcações após processamento
                delete form.dataset.handledByProductCard;
                delete form.dataset.processing;
                delete form.dataset.lastSubmission;
              }, 200);
              
            } else {
              const error = await response.json();
              throw new Error(error.message || 'Error adding product');
            }
            
          } catch (error) {
            console.error('Erro ao adicionar produto:', error);
            
            // Mostra notificação de erro
            if (window.CartNotification) {
              window.CartNotification.error('Unable to add product to cart. Please try again.', 'Error adding product');
            }
            
            // Restaura o botão em caso de erro
            submitButton.disabled = false;
            submitButton.textContent = originalText;
            // Remove as marcações em caso de erro
            delete form.dataset.handledByProductCard;
            delete form.dataset.processing;
            delete form.dataset.lastSubmission;
          }
        });
      });
    });
  </script>
{% endif %}