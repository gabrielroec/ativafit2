<style>
  .endorsement-slider-section {
    background: #fff;
    padding: 70px 20px 0;
    overflow: hidden;
    width: 100%;
    max-width: 1750px;
    margin: 0 auto;
  }

  .endorsement-slider-wrapper {
    width: 100%;
    position: relative;
    padding: 0 0 40px;
  }

  /* Container para os 7 slides visíveis */
  .endorsement-visible-slides {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 40px;
    margin-bottom: 40px;
    position: relative;
  }

  .endorsement-slide {
    min-width: 100px;
    max-width: 100px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
  }

  .endorsement-slide:hover {
    transform: scale(1.05);
  }

  /* Estilos para diferentes posições */
  .endorsement-slide.far-left {
    transform: scale(0.7);
    opacity: 0.3;
  }

  .endorsement-slide.left {
    transform: scale(0.8);
    opacity: 0.5;
  }

  .endorsement-slide.near-left {
    transform: scale(0.9);
    opacity: 0.7;
  }

  .endorsement-slide.active {
    transform: scale(1.4);
    opacity: 1;
    z-index: 2;
    align-items: center;
    justify-content: center;
  }

  .endorsement-slide.near-right {
    transform: scale(0.9);
    opacity: 0.7;
    align-items: center;
    justify-content: center;
  }

  .endorsement-slide.right {
    transform: scale(0.8);
    opacity: 0.5;
    align-items: center;
    justify-content: center;
  }

  .endorsement-slide.far-right {
    transform: scale(0.7);
    opacity: 0.3;
    align-items: center;
    justify-content: center;
  }

  .endorsement-slide img {
    width: 100%;
    max-width: 100%;
    height: auto;
    object-fit: contain;
    margin-bottom: 16px;
    filter: grayscale(100%);
    transition: filter 0.3s ease;
  }

  .endorsement-slide.active img {
    filter: grayscale(0%);
  }

  /* Animações para os slides */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(30px) scale(0.7);
    }
    to {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }

  @keyframes slideOut {
    from {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateX(-30px) scale(0.7);
    }
  }

  @keyframes fadeInText {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .endorsement-slide.sliding-in {
    animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .endorsement-slide.sliding-out {
    animation: slideOut 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Container para o texto da marca ativa */
  .endorsement-active-text {
    text-align: center;
    min-height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .endorsement-text-content {
    font-size: 24px!important;
    color: #222;
    font-family: "Barlow";
    font-weight: 900;
    max-width: 700px;
    line-height: 1.4;
    animation: fadeInText 0.5s ease forwards;
  }

  /* Botões de navegação */
  .endorsement-nav {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 30px;
  }

  .endorsement-nav-btn {
    background: #f0f0f0;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    transition: background 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    /* Aumentar tamanho das setas */
  }

  .endorsement-nav-btn:hover {
    background: #ddd;
  }

  .endorsement-nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Estilo para os dots */
  .endorsement-dots {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin: 0 20px;
    /* Espaçamento lateral para as setas */
  }

  .endorsement-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #ddd;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    padding: 0;
  }

  .endorsement-dot.active {
    background: #222;
    transform: scale(1.2);
  }

  /* Ajuste do container de navegação */
  .endorsement-navigation {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    margin-top: 30px;
  }
  .endorsement-slider-title{
    font-size: 40px!important;
  }
  @media screen and (max-width: 768px) {
    .endorsement-slider-section {
      padding: 40px 10px 0;
    }


    .endorsement-visible-slides {
      gap: 40px;
    }

    .endorsement-text-content {
      font-size: 16px;
    }
  }

  @media screen and (max-width: 480px) {

    .endorsement-visible-slides {
      gap: 20px;
    }

    .endorsement-slide {
      min-width: 80px;
      max-width: 80px;
    }

    .endorsement-slide img {
      max-width: 80px;
    }
  }
</style>

<section class="endorsement-slider-section" data-endorsement-slider>
  <h2 class="endorsement-slider-title">
    {{ section.settings.title }}
  </h2>
  <div class="endorsement-slider-wrapper">
    <!-- Container para os slides visíveis -->
    <div class="endorsement-visible-slides" data-visible-slides>
      <!-- Os slides serão inseridos aqui via JavaScript -->
    </div>

    <!-- Container para o texto da marca ativa -->
    <div class="endorsement-active-text">
      <h2 class="endorsement-text-content" data-active-text>
        <!-- O texto será inserido aqui via JavaScript -->
      </h2>
    </div>

    <!-- Container unificado de navegação -->
    <div class="endorsement-navigation">
      <button class="endorsement-nav-btn" data-nav-prev>‹</button>
      <div class="endorsement-dots" data-dots>
        {% for block in section.blocks %}
          <button
            class="endorsement-dot{% if forloop.index0 == 0 %} active{% endif %}"
            data-index="{{ forloop.index0 }}"
            aria-label="Ir para slide {{ forloop.index }}"></button>
        {% endfor %}
      </div>
      <button class="endorsement-nav-btn" data-nav-next>›</button>
    </div>
  </div>

  <!-- Slides ocultos (dados) -->
  <div style="display: none;" data-slides-data>
    {% for block in section.blocks %}
      <div
        class="endorsement-slide-data"
        data-brand="{{ block.settings.brand | escape }}"
        data-text="{{ block.settings.text | escape }}"
        data-logo="{{ block.settings.logo | image_url: width: 127 }}"
        data-slide-index="{{ forloop.index0 }}"></div>
    {% endfor %}
  </div>
</section>

<script>
  class EndorsementSlider {
    constructor(container) {
      this.container = container;
      this.visibleSlidesContainer = container.querySelector('[data-visible-slides]');
      this.activeTextContainer = container.querySelector('[data-active-text]');
      this.prevBtn = container.querySelector('[data-nav-prev]');
      this.nextBtn = container.querySelector('[data-nav-next]');
      this.slidesData = [...container.querySelectorAll('.endorsement-slide-data')];
      this.dots = container.querySelectorAll('[data-dots] .endorsement-dot');
      
      this.currentIndex = 0;
      this.autoPlayInterval = null;
      
      this.init();
    }

    init() {
      if (this.slidesData.length < 7) {
        console.warn('Endorsement Slider precisa de pelo menos 7 slides');
        return;
      }

      this.render();
      this.bindEvents();
      this.bindDotEvents();
      this.startAutoPlay();
    }

    render() {
      // Adicionar classe para animar a saída dos slides atuais
      const currentSlides = this.visibleSlidesContainer.querySelectorAll('.endorsement-slide');
      currentSlides.forEach(slide => {
        slide.classList.add('sliding-out');
      });

      // Aguardar um pequeno delay para iniciar a nova renderização
      setTimeout(() => {
        // Limpar container
        this.visibleSlidesContainer.innerHTML = '';
        
        // Calcular índices para todos os 7 slides
        const positions = this.calculateSlidePositions();
        
        // Criar elementos dos slides com animação de entrada
        positions.forEach(({ data, position }) => {
          const slide = document.createElement('div');
          slide.className = `endorsement-slide ${position} sliding-in`;
          slide.dataset.slideIndex = this.slidesData.indexOf(data);
          slide.innerHTML = `
            <img src="${data.dataset.logo}" 
                 alt="${data.dataset.brand}" 
                 loading="lazy">
          `;
          this.visibleSlidesContainer.appendChild(slide);

          // Remover classe de animação após a conclusão
          setTimeout(() => {
            slide.classList.remove('sliding-in');
          }, 600);
        });
        
        // Atualizar texto ativo com fade
        const activeSlide = this.slidesData[this.currentIndex];
        this.activeTextContainer.style.opacity = '0';
        setTimeout(() => {
          this.activeTextContainer.textContent = activeSlide.dataset.text ? `"${activeSlide.dataset.text}"` : '';
          this.activeTextContainer.style.opacity = '1';
        }, 300);

        // Atualizar os dots
        this.updateDots();
      }, 300);
    }

    calculateSlidePositions() {
      const totalSlides = this.slidesData.length;
      const positions = [];
      
      // Calcular índices para os 7 slides
      const indices = [
        (this.currentIndex - 3 + totalSlides) % totalSlides, // far-left
        (this.currentIndex - 2 + totalSlides) % totalSlides, // left
        (this.currentIndex - 1 + totalSlides) % totalSlides, // near-left
        this.currentIndex, // active
        (this.currentIndex + 1) % totalSlides, // near-right
        (this.currentIndex + 2) % totalSlides, // right
        (this.currentIndex + 3) % totalSlides  // far-right
      ];
      
      const positionClasses = [
        'far-left',
        'left',
        'near-left',
        'active',
        'near-right',
        'right',
        'far-right'
      ];
      
      indices.forEach((index, i) => {
        positions.push({
          data: this.slidesData[index],
          position: positionClasses[i]
        });
      });
      
      return positions;
    }

    bindEvents() {
      this.prevBtn.addEventListener('click', () => this.prev());
      this.nextBtn.addEventListener('click', () => this.next());
      
      // Adicionar eventos de clique nos slides
      this.visibleSlidesContainer.addEventListener('click', (e) => {
        const slide = e.target.closest('.endorsement-slide');
        if (slide) {
          const slideIndex = parseInt(slide.dataset.slideIndex);
          if (!isNaN(slideIndex)) {
            this.currentIndex = slideIndex;
            this.render();
          }
        }
      });
      
      // Pausar autoplay no hover
      this.container.addEventListener('mouseenter', () => this.stopAutoPlay());
      this.container.addEventListener('mouseleave', () => this.startAutoPlay());
      
      // Pausar quando a página não está visível
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.stopAutoPlay();
        } else {
          this.startAutoPlay();
        }
      });
    }

    bindDotEvents() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          this.currentIndex = index;
          this.render();
        });
      });
    }

    updateDots() {
      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.classList.add('active');
        } else {
          dot.classList.remove('active');
        }
      });
    }

    next() {
      this.currentIndex = (this.currentIndex + 1) % this.slidesData.length;
      this.render();
    }

    prev() {
      this.currentIndex = this.currentIndex === 0 ? this.slidesData.length - 1 : this.currentIndex - 1;
      this.render();
    }

    startAutoPlay() {
      this.stopAutoPlay();
      this.autoPlayInterval = setInterval(() => {
        this.next();
      }, 40000); // Muda a cada 4 segundos
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }
  }

  // Inicializar slider quando o DOM estiver carregado
  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('[data-endorsement-slider]');
    sliders.forEach(slider => new EndorsementSlider(slider));
  });
</script>

{% schema %}
  {
    "name": "Endorsement Slider",
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Título",
        "default": "ENDORSEMENTS FROM GLOBAL MEDIA"
      }
    ],
    "blocks": [
      {
        "type": "endorsement",
        "name": "Depoimento",
        "settings": [
          {
            "type": "image_picker",
            "id": "logo",
            "label": "Logo da Marca"
          }, {
            "type": "text",
            "id": "brand",
            "label": "Nome da Marca"
          }, {
            "type": "text",
            "id": "text",
            "label": "Texto do Depoimento",
            "default": "Texto de depoimento da marca sobre a loja."
          }
        ]
      }
    ],
    "max_blocks": 20,
    "presets": [
      {
        "name": "Endorsement Slider",
        "category": "Depoimentos",
        "blocks": [
          {
            "type": "endorsement"
          }, {
            "type": "endorsement"
          }, {
            "type": "endorsement"
          }
        ]
      }
    ]
  }
{% endschema %}