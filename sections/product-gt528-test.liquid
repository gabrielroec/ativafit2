<style>
  .pp-full {
    background: #F2F2F2;
    padding: 50px 20px;
  }

  .product-name {
    font-family: Barlow;
    font-weight: 700 !important;
    font-style: Bold;
    font-size: 40px;
    leading-trim: NONE;
    line-height: 42px;
    letter-spacing: 0;
    width: 100%;
    max-width: 545px;
    margin: 0 0 40px !important;
  }
  .product-subtitle {
    font-family: Barlow;
     
    font-style: Regular;
    font-size: 25px;
    leading-trim: NONE;
    letter-spacing: 0;
    width: 100%;
    max-width: 400px;
    margin: 0 0 20px !important;
    white-space: pre-line;

  }
  .review {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 40px !important;
  }
  .review-text {
    font-family: Barlow;
     
    font-style: Regular;
    font-size: 18px;
    leading-trim: NONE;
    line-height: 24px;
    letter-spacing: 0;
  }
  .product-price-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .product-price {
    font-family: Barlow;
    font-weight: 600 !important;
    font-style: SemiBold;
    font-size: 36px!important;
    leading-trim: NONE;
    line-height: 42px;
    letter-spacing: 0;
    color: #EB701F;
    margin: 0 !important;


  }
  .product-price-original {
    font-family: Barlow;
      
    font-style: Medium;
    font-size: 24px;
    leading-trim: NONE;
    line-height: 42px;
    letter-spacing: 0;
    text-decoration: line-through;
    margin-bottom: 0 !important;

  }
  /* Wrapper */
  .pmg {
    max-width: 880px;
    user-select: none;
    margin-top: 40px !important;
  }

  /* Área principal */
  .pmg-main {
    position: relative
  }
  .pmg-stage {
    background: #f6f6f6;
    border-radius: 20px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 0;
    padding-bottom: 75%;
    /* 4:3 aspect ratio */
    max-width: 600px;
    margin: 0 auto;
    position: relative;
  }
  .pmg-stage img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  @media (max-width: 1024px) {
    .pp-full {
      padding: 40px 0 !important;
    }
  }
  @media (max-width: 768px) {
    .pmg-stage {
      height: 400px;
      max-width: 100%;
    }
  }

  @media (max-width: 480px) {
    .pmg-stage {
      height: 350px;
    }
  }

  /* Setas */
  .pmg-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    display: grid;
    place-items: center;
    width: 40px;
    height: 40px;
    border-radius: 999px;
    border: 0;
    background: #fff;
    color: #111;
    box-shadow: 0 4px 14px rgba(0, 0, 0, 0.12);
    cursor: pointer;
    transition: transform 0.15s ease
    , opacity 0.15s ease;
  }
  .pmg-prev {
    left: 8px
  }
  .pmg-next {
    right: 8px
  }
  .pmg-nav:disabled {
    opacity: .4;
    cursor: not-allowed
  }
  .pmg-nav:active {
    transform: translateY(-50%) scale(0.96)
  }

  /* Thumbs */
  .pmg-thumbs {
    margin-top: 12px;
    position: relative;
    overflow: hidden;
  }

  .pmg-thumbs .swiper {
    width: 100%;
    height: auto;
    overflow: hidden;
  }

  .pmg-thumbs .swiper-wrapper {
    display: flex;
    align-items: center;
  }

  .pmg-thumbs .swiper-slide {
    width: calc(20% - 8px) !important;
    flex-shrink: 0;
  }

  /* Fallback se Swiper não funcionar */
  .pmg-thumbs-fallback {
    display: flex;
    overflow-x: auto;
    gap: 10px;
    padding: 4px 0;
    scrollbar-width: thin;
  }

  .pmg-thumbs-fallback .pmg-thumb {
    width: 80px;
    min-width: 80px;
    height: 80px;
    flex-shrink: 0;
  }

  .pmg-thumbs-fallback::-webkit-scrollbar {
    height: 6px;
  }

  .pmg-thumbs-fallback::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }

  .pmg-thumbs-fallback::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 3px;
  }

  .pmg-thumbs-fallback::-webkit-scrollbar-thumb:hover {
    background: #999;
  }

  @media (max-width: 720px) {
    .pmg-thumbs .swiper-slide {
      width: calc(25% - 6px) !important;
    }

    .pmg-thumbs-fallback .pmg-thumb {
      width: 70px;
      min-width: 70px;
      height: 70px;
    }
  }
  .pmg-thumb {
    position: relative;
    border: 1px solid #e5e5e5;
    border-radius: 15px;
    overflow: hidden;
    background: #fff;
    padding: 0 0 75%;
    cursor: pointer;
    width: 100%;
    height: 0;
    /* 4:3 aspect ratio */
    display: block;
  }
  .pmg-thumb img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: #fafafa;
    display: block;
  }
  .pmg-thumb[aria-current="true"] {
    outline: 2px solid #111
  }
  .pmg-thumb:focus-visible {
    outline: 2px solid #111;
    outline-offset: 2px
  }
  .container-product-page {
    display: flex;
    justify-content: center;
    gap: 80px;
  }
  .product-features {
    font-family: Barlow;
     
    font-style: Regular;
    font-size: 25px;
    leading-trim: NONE;
    line-height: 30px;
    letter-spacing: 0;
    width: 100%;
    max-width: 400px;
    margin-bottom: 20px !important;
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .feature-line {
    display: block;
    white-space: nowrap;
  }

  @media (max-width: 480px) {
    .feature-line {
      white-space: normal;
    }
  }
  .benefits {
    display: flex;
    background: #fff;
    padding: 20px;
    border-radius: 25px;
    gap: 20px;
    justify-content: space-around;
  }
  
  .benefit-item {
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: 8px;
    position: relative;
  }
  
  /* Ícone posicionado no top right da imagem */
  .benefit-item img {
    position: relative;
  }
  
  .benefit-info-btn {
    position: absolute;
    top: -10px;
    right: -20px;
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid #e5e5e5;
    border-radius: 50%;
    padding: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    transition: all 0.2s ease;
    flex-shrink: 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }
  
  .benefit-info-btn:hover {
    opacity: 0.7;
    transform: scale(1.1);
  }
  
  .benefit-info-btn:focus {
    outline: 2px solid #EB701F;
    outline-offset: 2px;
  }
  
  .benefit-info-btn svg {
    width: 14px;
    height: 14px;
  }
  
  
  .benefit-text {
    font-family: Barlow;
     
    font-style: Regular;
    font-size: 16px;
    leading-trim: NONE;
    line-height: 19px;
    letter-spacing: 0;
    text-align: center;
    width: 100%;
    max-width: 170px;
  }

  /* GALERIA SIMPLES */
  .product-gallery {
    width: 100%;
    max-width: 600px;
    margin: 40px auto 0;
  }

  /* Imagem Principal */
  .main-image {
    width: 100%;
    height: 0;
    padding-bottom: 75%;
    /* 4:3 aspect ratio */
    background: #f6f6f6;
    border-radius: 20px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
    position: relative;
    cursor: pointer;
    touch-action: pan-y pinch-zoom;
  }

  .main-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  /* Video Container */
  .main-video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #000;
  }

  .main-video-container video {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 20px;
  }

  .video-play-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0.8;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 2;
  }

  .main-video-container:hover .video-play-overlay {
    opacity: 1;
  }

  /* Esconde o ícone de play quando o vídeo está tocando */
  .main-video-container.video-playing .video-play-overlay {
    opacity: 0;
  }

  .main-video-container.video-playing:hover .video-play-overlay {
    opacity: 0;
  }

  /* Thumbnail Video Styles */
  .thumbnail-container {
    position: relative;
    cursor: pointer;
    flex-shrink: 0;
  }

  .video-thumbnail-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0.95;
    transition: all 0.3s ease;
    pointer-events: none;
    z-index: 2;
    background: #EB701F;
    border-radius: 50%;
    padding: 12px;
    box-shadow: 0 4px 12px rgba(235, 112, 31, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  .video-thumbnail-overlay svg {
    width: 20px;
    height: 20px;
    margin-left: 2px;
    /* Ajuste fino para centralizar o triângulo */
  }

  .video-thumbnail-overlay svg path {
    fill: white;
  }

  .thumbnail-container:hover .video-thumbnail-overlay {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.15);
    background: #d65a0f;
    box-shadow: 0 6px 16px rgba(235, 112, 31, 0.6);
  }

  .thumbnail-container.active .video-thumbnail-overlay {
    opacity: 1;
    background: #EB701F;
    transform: translate(-50%, -50%) scale(1.1);
    box-shadow: 0 4px 12px rgba(235, 112, 31, 0.5);
  }

  /* Fullscreen Video Styles */
  .fullscreen-video {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    border-radius: 8px;
    user-select: none;
    -webkit-user-select: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  }

  .fullscreen-thumb-container {
    position: relative;
    cursor: pointer;
    flex-shrink: 0;
  }

  .fullscreen-video-thumbnail-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0.95;
    transition: all 0.3s ease;
    pointer-events: none;
    z-index: 2;
    background: #EB701F;
    border-radius: 50%;
    padding: 8px;
    box-shadow: 0 3px 10px rgba(235, 112, 31, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
  }

  .fullscreen-video-thumbnail-overlay svg {
    width: 16px;
    height: 16px;
    margin-left: 1px;
    /* Ajuste fino para centralizar o triângulo */
  }

  .fullscreen-video-thumbnail-overlay svg path {
    fill: white;
  }

  .fullscreen-thumb-container:hover .fullscreen-video-thumbnail-overlay {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.15);
    background: #d65a0f;
    box-shadow: 0 4px 12px rgba(235, 112, 31, 0.6);
  }

  .fullscreen-thumb-container.active .fullscreen-video-thumbnail-overlay {
    opacity: 1;
    background: #EB701F;
    transform: translate(-50%, -50%) scale(1.1);
    box-shadow: 0 3px 10px rgba(235, 112, 31, 0.5);
  }

  /* Indicador de swipe */
  .swipe-indicator {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 12px;
      
    opacity: 0.8;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .swipe-indicator.hidden {
    opacity: 0;
  }

  /* Modal de visualização em tela cheia */
  .fullscreen-modal {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    background: rgba(0, 0, 0, 0.95) !important;
    z-index: 99999 !important;
    display: none;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px 20px 20px;
  }

  /* Bloqueia scroll quando modal está ativo */
  body.modal-open {
    overflow: hidden !important;
    position: fixed !important;
    width: 100% !important;
  }

  .fullscreen-modal.active {
    display: flex !important;
  }

  /* Container principal da galeria em tela cheia */
  .fullscreen-gallery {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  /* Área da imagem principal em tela cheia */
  .fullscreen-main-area {
    flex: 1;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    margin-bottom: 20px;
  }

  .fullscreen-image {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    border-radius: 8px;
    user-select: none;
    -webkit-user-select: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  }

  /* Botão de fechar */
  .fullscreen-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 24px;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 999999;
    backdrop-filter: blur(10px);
  }

  .fullscreen-close:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  /* Setas de navegação na imagem principal */
  .fullscreen-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 20px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 5;
  }

  /* Esconder setas do modal fullscreen no mobile */
  @media (max-width: 768px) {
    .fullscreen-nav {
      display: none !important;
    }
  }

  .fullscreen-nav:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-50%) scale(1.1);
  }

  .fullscreen-prev {
    left: 30px;
  }

  .fullscreen-next {
    right: 30px;
  }

  /* Galeria de miniaturas em tela cheia */
  .fullscreen-thumbnails {
    width: 100%;
    max-width: 800px;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    padding: 20px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(10px);
  }

  .fullscreen-thumbnails-container {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding: 10px 0;
    scroll-behavior: smooth;
  }

  .fullscreen-thumbnails-container::-webkit-scrollbar {
    height: 4px;
  }

  .fullscreen-thumbnails-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  }

  .fullscreen-thumbnails-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
  }

  .fullscreen-thumb {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    border: 2px solid transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    flex-shrink: 0;
  }

  .fullscreen-thumb:hover {
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.05);
  }

  .fullscreen-thumb.active {
    border-color: #EB701F;
    box-shadow: 0 0 10px rgba(235, 112, 31, 0.5);
  }

  /* Container das Miniaturas */
  .thumbnails-container {
    display: flex;
    align-items: center;
  }

  /* Setas de Navegação da Imagem Principal */
  .main-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: all 0.2s ease;
    color: #333;
    backdrop-filter: blur(10px);
  }

  /* Esconder setas no mobile */
  @media (max-width: 768px) {
    .main-nav {
      display: none !important;
    }
  }

  .main-nav:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-50%) scale(1.05);
  }

  .main-nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .main-prev {
    left: 20px;
  }

  .main-next {
    right: 20px;
  }

  /* Área de Scroll das Miniaturas */
  .thumbnails-scroll {
    flex: 1;
    overflow: hidden;
    position: relative;
  }

  /* Container das Miniaturas */
  .thumbnails {
    display: flex;
    gap: 8px;
    transition: transform 0.1s ease;
    padding: 4px 0;
    cursor: grab;
  }

  .thumbnails:active {
    cursor: grabbing;
  }

  /* Miniaturas */
  .thumbnail {
    width: 80px;
    height: 60px;
    object-fit: cover;
    border-radius: 12px;
    border: 2px solid transparent;
    cursor: pointer;
    flex-shrink: 0;
    transition: all 0.2s ease;
  }

  .thumbnail:hover {
    border-color: #ccc;
  }

  .thumbnail.active {
    border-color: #EB701F;
    box-shadow: 0 0 0 1px #EB701F;
  }

  /* Responsivo */
  @media (max-width: 768px) {
    .main-image {
      padding-bottom: 75%;
      /* Keep 4:3 aspect ratio */
    }

    .thumbnail {
      width: 70px;
      height: 52.5px;
      /* 4:3 ratio */
    }

    .main-nav {
      width: 40px;
      height: 40px;
    }

    /* Indicador de swipe mais visível no mobile */
    .swipe-indicator {
      top: 15px;
      right: 15px;
      font-size: 11px;
      padding: 6px 10px;
    }

    /* Modal em tela cheia otimizado para mobile */
    .fullscreen-modal {
      padding: 20px 10px 10px;
    }

    .fullscreen-close {
      width: 45px;
      height: 45px;
      top: 15px;
      right: 15px;
      font-size: 20px;
    }

    .fullscreen-nav {
      width: 45px;
      height: 45px;
      font-size: 18px;
    }

    .fullscreen-prev {
      left: 15px;
    }

    .fullscreen-next {
      right: 15px;
    }

    /* Galeria de miniaturas mobile */
    .fullscreen-thumbnails {
      max-width: 100%;
      height: 80px;
      padding: 15px;
    }

    .fullscreen-thumb {
      width: 60px;
      height: 60px;
    }

    .benefits {
      flex-direction: column !important;
      gap: 20px !important;
      align-items: flex-start !important;
      justify-content: flex-start !important;
    }
    
    .benefit-item {
      flex-direction: row !important;
      align-items: center !important;
      width: 100%;
    }
    
    .benefit-text {
      max-width: 100% !important;
      text-align: left;
    }
    .pp-full {
      padding: 0 0 20px !important
    }
  }

  @media (max-width: 480px) {
    .main-image {
      padding-bottom: 75%;
      /* Keep 4:3 aspect ratio */
    }

    .thumbnail {
      width: 60px;
      height: 45px;
      /* 4:3 ratio */
    }
  }

  /* PRODUCT OPTIONS */
  .product-options {
    margin-top: 40px;
    margin-bottom: 20px !important;
    max-width: 800px;
  }

  .options-row {
    display: flex;
    gap: 60px;
    align-items: flex-start;
    justify-content: space-between;
    flex-wrap: wrap;
  }


  .option-label {
    font-family: Barlow
    , sans-serif;
    font-weight: 600;
    font-size: 18px;
    color: #333;
    margin-bottom: 12px;
    display: block;
  }

  /* VARIANTES (Color, Size, etc.) */
  .option-values {
    display: flex;
    gap: 12px;
  }

  .option-values input[type="radio"] {
    display: none;
  }

  .option-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 12px 24px;
    border: 2px solid #ddd;
    border-radius: 8px;
    background: #fff;
    cursor: pointer;
    font-family: Barlow
    , sans-serif;
      
    font-size: 16px;
    color: #333;
    transition: all 0.2s ease;
    min-width: 120px;
    text-align: center;
  }

  .option-button:hover {
    border-color: #EB701F;
    background: #fef7f0;
  }

  .option-values input[type="radio"]:checked + .option-button {
    border-color: #EB701F;
    background: #fff;
    color: #333;
  }

  /* QUANTITY SELECTOR */
  .quantity-selector {
    display: flex;
    align-items: center;
    border: 2px solid #ddd;
    border-radius: 8px;
    background: #fff;
    width: fit-content;
    height: 57.51px;
  }

  .qty-btn {
    background: none;
    border: none;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 20px;
    font-weight: bold;
    color: #333;
    transition: all 0.2s ease;
  }

  .qty-btn:hover {
    background: #f5f5f5;
    color: #EB701F;
  }

  .qty-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .qty-input {
    border: none;
    width: 60px;
    height: 44px;
    text-align: center;
    font-size: 16px;
    font-weight: 600;
    background: none;
    outline: none;
  }

  /* PAYMENT OPTIONS */
  .payment-options {
    margin-top: 20px;

  }

  .payment-text {
    font-family: Barlow !important;
     
    font-style: Regular !important;
    font-size: 18px !important;
    leading-trim: NONE !important;
    line-height: 19px !important;
    letter-spacing: 0 !important;

  }

  .shop-pay-logo {
    width: 78.5px !important;
    height: 18px !important;
    display: inline !important;
    vertical-align: baseline !important;
    margin: 0 2px !important;
  }

  .learn-more-link {
    font-family: Barlow
    , sans-serif;
    font-size: 18px;
    color: #333;
    text-decoration: underline;
    cursor: pointer;
    margin: 0;
    display: block;
  }

  .learn-more-link:hover {
    color: #333;
    text-decoration: underline;
  }

  /* ADD TO CART BUTTON */
  .add-to-cart-section {
    margin-top: 30px;
    text-align: center;
  }

  .add-to-cart-btn {
    background: #EB701F;
    color: #000;
    border: none;
    padding: 18px 40px;
    font-family: Barlow
    , sans-serif;
    font-size: 16px;
    font-weight: 700 !important;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    width: 100%;
  }

  .add-to-cart-btn:hover {
    background: #d65a0f;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .add-to-cart-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* PRODUCT ACCORDION */
  .product-accordion {
    margin-top: 40px;
    max-width: 800px;
  }

  .accordion-item {
    border-bottom: 1px solid #313131;
    margin-bottom: 0;
  }

  .accordion-item:first-child {
    border-top: 1px solid #313131;
  }

  .accordion-header {
    width: 100%;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: Barlow
    , sans-serif;
    font-size: 18px;
    font-weight: 700 !important;
    color: #333 !important;
    transition: all 0.2s ease;
  }

  .accordion-header:hover {
    color: #EB701F !important;
  }

  /* Accordion header ativo (aberto) - destaque laranja */
  .accordion-header.active {
    color: #EB701F !important;
  }

  .accordion-icon {
    font-size: 24px;
     
    color: #666;
    transition: transform 0.3s ease;
  }

  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
    padding: 0;
  }

  .accordion-content.active {
    max-height: 500px;
    padding: 0 0 20px;
  }

  .accordion-content ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .accordion-content li {
    font-family: Barlow !important;
      
    font-style: Medium !important;
    font-size: {{ section.settings.accordion_font_size | default: 16 }}
    px !important;
    leading-trim: NONE !important;
    line-height: {{ section.settings.accordion_font_size | default: 16 | plus: 8 }}
    px !important;
    letter-spacing: 0 !important;
  }

  .accordion-content strong {
    font-family: Barlow !important;
      
    font-style: Medium !important;
    font-size: {{ section.settings.accordion_font_size | default: 16 }}
    px !important;
    leading-trim: NONE !important;
    line-height: {{ section.settings.accordion_font_size | default: 16 | plus: 8 }}
    px !important;
    letter-spacing: 0 !important;
  }

  .accordion-content .accordion-text {
    font-family: Barlow !important;
      
    font-style: Medium !important;
    font-size: {{ section.settings.accordion_font_size | default: 16 }}
    px !important;
    leading-trim: NONE !important;
    line-height: {{ section.settings.accordion_font_size | default: 16 | plus: 8 }}
    px !important;
    letter-spacing: 0 !important;
  }

  .accordion-link {
    margin-top: 16px;
    font-family: Barlow
    , sans-serif;
    font-size: 14px;
    color: #666;
  }

  .accordion-link a {
    color: #EB701F;
    text-decoration: none;
      
  }

  .accordion-link a:hover {
    text-decoration: underline;
  }

  .product-price-container.mobile-only {
    display: none !important;
  }
  @media (max-width: 768px) {
    .product-options {
      margin-top: 30px;
    }

    .options-row {
      flex-direction: column;
      gap: 30px;
    }

    .product-option {
      min-width: unset;
    }

    .option-button {
      min-width: 100px;
      padding: 10px 16px;
      font-size: 14px;
    }
  }

  @media (max-width: 1024px) {
    .container-product-page {
      flex-direction: column;
      gap: 20px;
    }
    .review {
      margin: 0 !important;
    }
    .show-desk {
      display: block;
    }
    .none-mob {
      display: none;
    }
    .none-desk {
      display: none;
    }
    .show-mob {
      display: block
    }
    .desktop-only {
      display: flex;
    }
    .product-main {
      display: flex;
      flex-direction: column-reverse;
      gap: 40px;
    }

    .product-info {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .product-info .product-options {
      order: 1;
    }

    /* Subtitle mobile: ajuste de line-height */


    .product-price-container.mobile-only {
      order: 2;
      display: none;
      /* Escondido no desktop */
    }
  }

  @media (min-width: 1025px) {
    .product-price-container.mobile-only {
      display: none !important;
    }
    .product-price-container.desktop-only {
      display: flex !important;
    }
  }

  /* Desktop: esconde preço mobile */


  .product-info .payment-options {
    order: 3;
    margin: 0 !important;
  }

  .product-info .add-to-cart-section {
    order: 4;
    margin: 0 !important;
  }

  .product-info .product-features {
    order: 5;
    /* Product features mobile: texto maior e mais negrito */
    font-size: 22px !important;
    font-weight: 600 !important;
    line-height: 28px !important;
  }

  /* Ajustes específicos para telas menores */
  @media (max-width: 480px) {
    .product-info .product-features {
      font-size: 22px !important;
      line-height: 24px !important;
    }
  }

  @media (max-width: 464px) {
    .product-info .product-features {
      font-size: 22px !important;
      line-height: 22px !important;
    }
  }

  @media (max-width: 346px) {
    .product-info .product-features {
      font-size: 20px !important;
      line-height: 20px !important;
    }
  }


  .product-info .benefits {
    order: 6;
  }

  .product-info .benefits img {
    width: 40px !important;
    height: 35px !important;
  }
  .product-info .benefits div {
    gap: 10px !important;
  }
  .product-info .product-accordion {
    order: 7;
  }

  .product-subtitle {
    font-family: Barlow !important;
     
    font-style: Regular !important;
    font-size: 22px !important;
    leading-trim: NONE !important;
    line-height: 30px !important;
    letter-spacing: 0 !important;

  }
  .option-button,
  .quantity-selector {
    height: 50px !important;
  }
  /* Preço no desktop - apenas acima de 1024px */
  .product-name-container .product-price-container {
    display: none !important;
  }

  @media (min-width: 1024px) {
    .product-name-container .product-price-container {
      display: flex !important;
      align-items: center !important;
    }
  }

  /* Preço no mobile - apenas abaixo de 1024px */
  .product-info .product-price-container {
    display: block !important;
  }

  @media (min-width: 1024px) {
    .product-info .product-price-container {
      display: none !important;
    }
  }

  @media (max-width: 1024px) {
    .product-price-container.mobile-only {
      display: block;
    }
    .product-price-container.desktop-only {
      display: none !important;
    }
    .product-name {
      margin: 0 0 20px !important;
    }
    /* Layout mobile: options em cima, preço embaixo */
    .product-info .product-options {
      order: 1;
      margin: 0;
      padding: 0;
    }

    .product-info .product-price-container.mobile-only {
      order: 2;
      margin: 0;
      padding: 0;
      display: flex !important;
      flex-direction: row !important;
      gap: 8px;
      align-items: center;
    }

    /* Options todas na mesma linha */
    .product-options .options-row {
      display: flex;
      flex-direction: row;
      gap: 20px;
      flex-wrap: nowrap;
    }

    /* Estilo dos títulos das options */
    .option-label {
      font-family: Barlow !important;
      font-weight: 700 !important;
      font-style: Bold !important;
      font-size: 18px !important;
      line-height: 24px !important;
      letter-spacing: 0 !important;
      margin: 0 !important;
      padding: 0 !important;
    }

    /* Remove todos os gaps e margens */
    .product-options,
    .product-option {
      margin: 0;
      padding: 0;
    }

    /* Preço mobile idêntico ao desktop */
    .product-price-container.mobile-only .product-price {
      font-family: Barlow !important;
      font-weight: 600 !important;
      font-style: SemiBold !important;
      font-size: 36px !important;
      leading-trim: NONE !important;
      line-height: 42px !important;
      letter-spacing: 0 !important;

    }

    .product-price-container.mobile-only .product-price-original {
      font-family: Barlow !important;
        
      font-style: Medium !important;
      font-size: 24px !important;
      leading-trim: NONE !important;
      line-height: 42px !important;
      letter-spacing: 0 !important;
      text-decoration: line-through !important;

    }
  }
  @media (max-width: 480px) {
    .quantity-selector {
      width: 130px !important;
    }
  }
  @media (max-width: 376px) {
    .quantity-selector {
      width: 90px !important;
    }
  }

  /* Rivyo Reviews Styling */
  .rivyoReviewWidget {
    display: flex !important;
    align-items: center;
    gap: 10px;
  }

  .rivyoReviewIcon {
    display: flex !important;
    gap: 3px !important;
    line-height: 0 !important;
    flex-direction: row !important;
  }

  .rivyoReviewRatingIcon {
    color: #EB701F;
    font-size: 18px;
    position: relative;
    display: inline-block;
  }

  .rivyoReviewAverage {
    font-family: Barlow;
     
    font-size: 18px;
    line-height: 24px;
    letter-spacing: 0;
    color: #333;
  }

  .rivyoReviewAverageCount {
    font-weight: 600 !important;
    color: #EB701F;
  }

  .reviewRateCount {
    color: #666;
  }

  .rivyoReviewEmpty {
    color: #ddd;
  }

  .rivyoReviewFill {
    color: #EB701F;
    overflow: hidden;
    position: absolute;
    top: 0;
    left: 0;
  }
</style>
<section class="pp-full">
  <section class="container container-product-page">
    <div class="product-main">

      <div class="product-name-container">
        <h1 class="product-name">{{ section.settings.product_title | default: product.title }}</h1>
        <p class="product-subtitle">{{ section.settings.product_subtitle | default: "Sculpt & Tone with Style.\nYour Home, Your Boutique Gym." }}</p>
        <div class="review">
          <!-- Rivyo Product Badge Rating - Dinâmico -->
          {%- assign productRivyoReview = product.metafields.product_schema -%}
          {%- assign shopRivyoReview = shop.metafields.rivyo -%}
          {%- assign shopRivyoReviewSetting = shopRivyoReview.setting.value -%}
          {%- assign productRivyoRating = productRivyoReview.th_ratingValue | split:'.' | default: '0' -%}
          {%- assign rivyoRatingSplit0 = productRivyoRating[0] | times: 1 -%}
          {%- assign rivyoRatingSplit1 = productRivyoRating[1] | default: '00' -%}
          {%- assign rivyoRatingCeil = productRivyoReview.th_ratingValue | ceil -%}
          {% assign hide_non_ratting_review = shopRivyoReviewSetting.hide_empty_review | times: 1 %}
          {% assign is_empty = false %}
          {% assign isClick = true %}
          
          <div class="rivyoReviewWidget rivyoWidgetTrigger" data-rating="{{ productRivyoReview.th_ratingValue | default: '00' }}" style="display:none;">
            <div class="rivyoReviewIcon" style="display:flex; gap:3px; line-height: 0; flex-direction: row">
              {%- for i in (1..5) -%}
                {% if i <= rivyoRatingSplit0 %}
                  <div class="rivyoReviewRatingIcon">
                    {{ shopRivyoReviewSetting.rating_icon }}
                  </div>
                {% elsif i == rivyoRatingCeil %}
                  <div class="rivyoReviewRatingIcon" >
                    <span class="rivyoReviewEmpty">
                      {{ shopRivyoReviewSetting.rating_icon }}
                    </span>
                    {%- unless rivyoRatingSplit1 == '00'-%}
                      <span class="rivyoReviewFill" style="width:{{ rivyoRatingSplit1 }}%">
                        {{ shopRivyoReviewSetting.rating_icon }}
                      </span>
                    {%- endunless -%}
                  </div>
                {% else %}
                  {% if hide_non_ratting_review == 0 or rivyoRatingSplit0 != 0 %}
                    <div class="rivyoReviewRatingIcon" >
                      <span class="rivyoReviewEmpty">
                        {{ shopRivyoReviewSetting.rating_icon }}
                      </span>
                    </div>
                  {% else %}
                    {% assign is_empty = true %}
                  {% endif %}
                {% endif %}
              {%- endfor -%}
            </div>
            {% if is_empty != true %}
              <span class="rivyoReviewAverage">
                <span class="rivyoReviewAverageCount">
                  {{- productRivyoReview.th_ratingValue | default: 0 | round: 1 }}
                </span>
                <span class="reviewRateCount">
                  <span class="rivyoReviewAverageBracket">(</span>
                  <span class="ratingCount">{{- productRivyoReview.th_ratingCount | default: 0 }}</span>
                  <span class="ratingLabel"> {{ shopRivyoReview.average_review_label }}</span>
                  <span class="rivyoReviewAverageBracket">)</span>
                </span>
              </span>
            {% endif %}
          </div>
          
          <!-- Fallback para quando não há reviews do Rivyo -->
          {% if is_empty == true or productRivyoReview.th_ratingValue == blank %}
            <div class="rivyo-fallback-rating">
              <div class="rivyoReviewIcon" style="display:flex; gap:3px; line-height: 0; flex-direction: row">
                <div class="rivyoReviewRatingIcon">
                  <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                </div>
                <div class="rivyoReviewRatingIcon">
                  <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                </div>
                <div class="rivyoReviewRatingIcon">
                  <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                </div>
                <div class="rivyoReviewRatingIcon">
                  <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                </div>
                <div class="rivyoReviewRatingIcon">
                  <span class="rivyoReviewEmpty">
                    <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                  </span><span class="rivyoReviewFill" style="width:57%">
                      <svg fill="#ffcf47" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="20px" height="20px" viewBox="0 0 475.075 475.075" style="enable-background:new 0 0 475.075 475.075;" xml:space="preserve"><g><path d="M475.075,186.573c0-7.043-5.328-11.42-15.992-13.135L315.766,152.6L251.529,22.694c-3.614-7.804-8.281-11.704-13.99-11.704   c-5.708,0-10.372,3.9-13.989,11.704L159.31,152.6L15.986,173.438C5.33,175.153,0,179.53,0,186.573c0,3.999,2.38,8.567,7.139,13.706   l103.924,101.068L86.51,444.096c-0.381,2.666-0.57,4.575-0.57,5.712c0,3.997,0.998,7.374,2.996,10.136   c1.997,2.766,4.993,4.142,8.992,4.142c3.428,0,7.233-1.137,11.42-3.423l128.188-67.386l128.197,67.386   c4.004,2.286,7.81,3.423,11.416,3.423c3.819,0,6.715-1.376,8.713-4.142c1.992-2.758,2.991-6.139,2.991-10.136   c0-2.471-0.096-4.374-0.287-5.712l-24.555-142.749l103.637-101.068C472.604,195.33,475.075,190.76,475.075,186.573z"></path></g></svg>
                    </span></div>
              </div>
              
              <span class="rivyoReviewAverage">
                <span class="rivyoReviewAverageCount">4.6</span>
                <span class="reviewRateCount">
                  <span class="rivyoReviewAverageBracket">(</span>
                  <span class="ratingCount">7</span>
                  <span class="ratingLabel">Reviews</span>
                  <span class="rivyoReviewAverageBracket">)</span>
                </span>
              </span>
            </div>
          {% endif %}
        </div>
        <div class="product-price-container desktop-only">
          <p class="product-price">{{ product.selected_or_first_available_variant.price | money }}</p>
          {%- if product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price -%}
            <p class="product-price-original">{{ product.selected_or_first_available_variant.compare_at_price | money }}</p>
          {%- endif -%}
        </div>
      </div>

      <!-- PRODUCT GALLERY SIMPLES -->
      <div class="product-gallery">
        <!-- Imagem Principal -->
        <div class="main-image" id="mainImageContainer">
          {%- if product.featured_media -%}
            <!-- Container de Vídeo (sempre presente) -->
            <div
              class="main-video-container"
              id="mainVideoContainer"
              style="display: none;">
          <video
            id="mainVideo"
            controls
                disablepictureinpicture
                controlslist="nodownload"
            preload="metadata"
            autoplay
            muted
            width="800"
                height="600">
            <source src="" type="video/mp4">
            Your browser does not support the video tag.
          </video>
              <div class="video-play-overlay">
                <svg
                  width="60"
                  height="60"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg">
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    fill="rgba(0,0,0,0.7)" />
                  <path d="M10 8L16 12L10 16V8Z" fill="white" />
                </svg>
              </div>
            </div>

          <!-- Imagem Principal (sempre presente) -->
          <img
            id="mainImage"
              src="{{ product.featured_media | image_url: width: 800 }}"
              alt="{{ product.featured_media.alt | escape }}"
            width="800"
            height="800"
              loading="lazy">
          {%- endif -%}

          <!-- Indicador de Swipe -->
          <div class="swipe-indicator" id="swipeIndicator">
            <span>← Swipe or tap to browse</span>
          </div>

          <!-- Setas de Navegação -->
          <button
            class="main-nav main-prev"
            onclick="changeImage(-1)"
            aria-label="Imagem anterior">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none">
              <path
                d="M15 18l-6-6 6-6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round" />
            </svg>
          </button>

          <button
            class="main-nav main-next"
            onclick="changeImage(1)"
            aria-label="Próxima imagem">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none">
              <path
                d="M9 6l6 6-6 6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round" />
            </svg>
          </button>
        </div>

        <!-- Modal de Visualização em Tela Cheia -->
        <div
          class="fullscreen-modal"
          id="fullscreenModal"
          style="display: none;">
          <div class="fullscreen-gallery">
            <!-- Botão de fechar -->
            <button
              class="fullscreen-close"
              onclick="closeFullscreen()"
              aria-label="Fechar visualização">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none">
                <path
                  d="M6 18L18 6M6 6l12 12"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round" />
              </svg>
            </button>

            <!-- Área da imagem principal -->
            <div class="fullscreen-main-area">
              <img
                class="fullscreen-image"
                id="fullscreenImage"
                src=""
                alt=""
                width="1200"
                height="900"
                style="display: none;">
              <video
                class="fullscreen-video"
                id="fullscreenVideo"
                controls
                disablepictureinpicture
                controlslist="nodownload"
                preload="metadata"
                autoplay
                muted
                width="1200"
                height="900"
                style="display: none;">
                <source src="" type="video/mp4">
                Your browser does not support the video tag.
              </video>
              <button
                class="fullscreen-nav fullscreen-prev"
                onclick="changeFullscreenImage(-1)"
                aria-label="Imagem anterior">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none">
                  <path
                    d="M15 18l-6-6 6-6"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round" />
                </svg>
              </button>
              <button
                class="fullscreen-nav fullscreen-next"
                onclick="changeFullscreenImage(1)"
                aria-label="Próxima imagem">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none">
                  <path
                    d="M9 6l6 6-6 6"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round" />
                </svg>
              </button>
            </div>

            <!-- Galeria de miniaturas em tela cheia -->
            <div class="fullscreen-thumbnails">
              <div class="fullscreen-thumbnails-container" id="fullscreenThumbnailsContainer">
                {%- for media in product.media -%}
                  <div class="fullscreen-thumb-container{% if media.id == product.featured_media.id %} active{% endif %}" onclick="changeFullscreenMediaByIndex({{ forloop.index0 }})">
                  {%- if media.media_type == 'video' -%}
                      <img
                        class="fullscreen-thumb fullscreen-thumb-video"
                        src="{{ media.preview_image | image_url: width: 150 }}"
                        alt="{{ media.alt | escape }}"
                        width="150"
                        height="113"
                        data-video-src="{{ media.sources[0].url }}">
                      <div class="fullscreen-video-thumbnail-overlay">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg">
                          <path d="M8 5V19L19 12L8 5Z" fill="white" />
                        </svg>
                    </div>
                  {%- else -%}
                    <img
                        class="fullscreen-thumb"
                      src="{{ media | image_url: width: 150 }}"
                      alt="{{ media.alt | escape }}"
                      width="150"
                      height="113"
                      data-fullsize="{{ media | image_url: width: 1200 }}">
                  {%- endif -%}
                  </div>
                {%- endfor -%}
              </div>
            </div>
          </div>
        </div>

        <!-- Miniaturas -->
        <div class="thumbnails-container">
          <div class="thumbnails-scroll">
            <div class="thumbnails">
              {%- for media in product.media -%}
                <div class="thumbnail-container{% if media.id == product.featured_media.id %} active{% endif %}" onclick="changeMainMedia({{ forloop.index0 }}, this)">
                {%- if media.media_type == 'video' -%}
                    <img
                      class="thumbnail thumbnail-video"
                      src="{{ media.preview_image | image_url: width: 150 }}"
                      alt="{{ media.alt | escape }}"
                      width="150"
                      height="150"
                      loading="lazy">
                    <div class="video-thumbnail-overlay">
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path d="M8 5V19L19 12L8 5Z" fill="white" />
                      </svg>
                  </div>
                {%- else -%}
                  <img
                      class="thumbnail"
                    src="{{ media | image_url: width: 150 }}"
                    alt="{{ media.alt | escape }}"
                    width="150"
                    height="150"
                    loading="lazy">
                {%- endif -%}
                </div>
              {%- endfor -%}
            </div>
          </div>
        </div>
      </div>


    </div>
    <div class="product-info">


      <p class="product-features">
        <span class="feature-line">{{ section.settings.feature_line_1 | default: "5 Weight Levels | 3-Second Switch" }}</span>
        <span class="feature-line">{{ section.settings.feature_line_2 | default: "Comfort Grip | Compact Storage" }}</span>
      </p>
      <div class="benefits">
        <div class="benefit-item">
          <div style="position: relative;">
            {% if section.settings.benefit_icon_1 %}
              <img
                src="{{ section.settings.benefit_icon_1 | image_url: width: 37 }}"
                alt="{{ section.settings.benefit_text_1 }}"
                width="37"
                height="25"
                style="width: 37px; height: 25px; object-fit: contain;">
            {% endif %}
            {% comment %} <button class="benefit-info-btn" type="button" aria-label="More information about {{ section.settings.benefit_text_1 }}">
              <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" role="presentation" class="icon icon-info" viewBox="0 0 1024 1024" width="20" height="20">
                <path fill="#c2c8ce" d="M512 0c281.6 0 512 230.4 512 512s-230.4 512-512 512S0 793.6 0 512 230.4 0 512 0zm0 716.8c-42.667 0-76.8 34.133-76.8 68.267s34.133 68.266 76.8 68.266 76.8-34.133 76.8-68.266S554.667 716.8 512 716.8zm17.067-529.067c-136.534 0-221.867 76.8-221.867 187.734h128c0-51.2 34.133-85.334 93.867-85.334 51.2 0 85.333 34.134 85.333 76.8-8.533 42.667-17.067 59.734-68.267 93.867l-17.066 8.533c-59.734 34.134-85.334 76.8-85.334 153.6v25.6H563.2v-25.6c0-42.666 17.067-68.266 76.8-102.4 68.267-34.133 93.867-85.333 93.867-153.6 17.066-110.933-68.267-179.2-204.8-179.2z"></path>
              </svg>
            </button> {% endcomment %}
          </div>
          <span class="benefit-text">{{ section.settings.benefit_text_1 | default: "Free Shipping within the U.S." }}</span>
        </div>
        <div class="benefit-item">
          <div style="position: relative;">
            {% if section.settings.benefit_icon_2 %}
              <img
                src="{{ section.settings.benefit_icon_2 | image_url: width: 37 }}"
                alt="{{ section.settings.benefit_text_2 }}"
                width="37"
                height="25"
                style="width: 37px; height: 25px; object-fit: contain;">
            {% endif %}
            {% comment %} <button class="benefit-info-btn" type="button" aria-label="More information about {{ section.settings.benefit_text_2 }}">
              <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" role="presentation" class="icon icon-info" viewBox="0 0 1024 1024" width="20" height="20">
                <path fill="#c2c8ce" d="M512 0c281.6 0 512 230.4 512 512s-230.4 512-512 512S0 793.6 0 512 230.4 0 512 0zm0 716.8c-42.667 0-76.8 34.133-76.8 68.267s34.133 68.266 76.8 68.266 76.8-34.133 76.8-68.266S554.667 716.8 512 716.8zm17.067-529.067c-136.534 0-221.867 76.8-221.867 187.734h128c0-51.2 34.133-85.334 93.867-85.334 51.2 0 85.333 34.134 85.333 76.8-8.533 42.667-17.067 59.734-68.267 93.867l-17.066 8.533c-59.734 34.134-85.334 76.8-85.334 153.6v25.6H563.2v-25.6c0-42.666 17.067-68.266 76.8-102.4 68.267-34.133 93.867-85.333 93.867-153.6 17.066-110.933-68.267-179.2-204.8-179.2z"></path>
              </svg>
            </button> {% endcomment %}
          </div>
          <span class="benefit-text">{{ section.settings.benefit_text_2 | default: "Free Shipping within the U.S." }}</span>
        </div>
        <div class="benefit-item">
          <div style="position: relative;">
            {% if section.settings.benefit_icon_3 %}
              <img
                src="{{ section.settings.benefit_icon_3 | image_url: width: 37 }}"
                alt="{{ section.settings.benefit_text_3 }}"
                width="37"
                height="25"
                style="width: 37px; height: 25px; object-fit: contain;">
            {% endif %}
            {% comment %} <button class="benefit-info-btn" type="button" aria-label="More information about {{ section.settings.benefit_text_3 }}">
              <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" role="presentation" class="icon icon-info" viewBox="0 0 1024 1024" width="20" height="20">
                <path fill="#c2c8ce" d="M512 0c281.6 0 512 230.4 512 512s-230.4 512-512 512S0 793.6 0 512 230.4 0 512 0zm0 716.8c-42.667 0-76.8 34.133-76.8 68.267s34.133 68.266 76.8 68.266 76.8-34.133 76.8-68.266S554.667 716.8 512 716.8zm17.067-529.067c-136.534 0-221.867 76.8-221.867 187.734h128c0-51.2 34.133-85.334 93.867-85.334 51.2 0 85.333 34.134 85.333 76.8-8.533 42.667-17.067 59.734-68.267 93.867l-17.066 8.533c-59.734 34.134-85.334 76.8-85.334 153.6v25.6H563.2v-25.6c0-42.666 17.067-68.266 76.8-102.4 68.267-34.133 93.867-85.333 93.867-153.6 17.066-110.933-68.267-179.2-204.8-179.2z"></path>
              </svg>
            </button> {% endcomment %}
          </div>
          <span class="benefit-text">{{ section.settings.benefit_text_3 | default: "Lifetime Customer Support" }}</span>
        </div>
      </div>

      <div class="product-options">
        <div class="options-row">

          {%- unless product.has_only_default_variant -%}
            {%- for option in product.options_with_values -%}
              <div class="product-option">
                <h3 class="option-label">{{ option.name }}</h3>
                <div class="option-values">
                  {%- for value in option.values -%}
                    <input
                      type="radio"
                      id="{{ option.name | handleize }}-{{ value | handleize }}"
                      name="{{ option.name | handleize }}"
                      value="{{ value | escape }}"
                      data-option-position="{{ option.position }}"
                      data-option-value="{{ value | escape }}"
                      {%- if option.selected_value == value -%}
                      checked{%- endif -%}
                      class="variant-option"
                      onclick="updateVariant()">
                    <label
                      for="{{ option.name | handleize }}-{{ value | handleize }}"
                      class="option-button"
                      onclick="document.getElementById('{{ option.name | handleize }}-{{ value | handleize }}').click()">
                      {{ value }}
                    </label>
                  {%- endfor -%}
                </div>
              </div>
            {%- endfor -%}
          {%- endunless -%}


          <div class="product-option">
            <h3 class="option-label">{{ section.settings.quantity_label | default: "Quantity" }}</h3>
            <div class="quantity-selector">
              <button
                type="button"
                class="qty-btn qty-minus"
                onclick="changeQuantity(-1)">-</button>
              <input
                type="number"
                id="quantity"
                name="quantity"
                value="1"
                min="1"
                max="10"
                class="qty-input"
                onchange="validateQuantity()">
              <button
                type="button"
                class="qty-btn qty-plus"
                onclick="changeQuantity(1)">+</button>
            </div>
          </div>
        </div>
      </div>

      <!-- PRICE FOR MOBILE ONLY -->
      <div class="product-price-container mobile-only">
        <p class="product-price">{{ product.selected_or_first_available_variant.price | money }}</p>
        {%- if product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price -%}
          <p class="product-price-original">{{ product.selected_or_first_available_variant.compare_at_price | money }}</p>
        {%- endif -%}
      </div>
      <div class="add-to-cart-section">
        <button
          type="button"
          class="add-to-cart-btn"
          onclick="addToCart()">
          {{ section.settings.add_to_cart_text | default: "ADD TO CART" }}
        </button>
      </div>
      <div class="product-accordion">
        {%- for block in section.blocks -%}
          {%- case block.type -%}
            {%- when 'accordion_item' -%}
              <div class="accordion-item" {{ block.shopify_attributes }}>
                <button class="accordion-header{% if forloop.first %} active{% endif %}" onclick="toggleAccordion(this)">
                  <span>{{ block.settings.title }}</span>
                  <span class="accordion-icon">
                    {% if forloop.first %}-{% else %}+{% endif %}
                  </span>
                </button>
                <div class="accordion-content{% if forloop.first %} active{% endif %}">
                  {%- if block.settings.content_type == 'list' -%}
                    <ul>
                      {%- for i in (1..5) -%}
                        {%- assign item_key = 'item_' | append: i -%}
                        {%- assign item_text = block.settings[item_key] -%}
                        {%- if item_text != blank -%}
                          <li>{{ item_text }}</li>
                        {%- endif -%}
                      {%- endfor -%}
                    </ul>
                  {%- elsif block.settings.content_type == 'text' -%}
                    <div class="accordion-text">
                      {{ block.settings.text_content }}
                    </div>
                  {%- endif -%}

                  {%- if block.settings.show_link and block.settings.link_text != blank and block.settings.link_url != blank -%}
                    <p class="accordion-link">
                      <a
                        href="{{ block.settings.link_url }}"
                        target="_blank"
                        rel="noopener">
                        {{ block.settings.link_text }}
                      </a>
                    </p>
                  {%- endif -%}
                </div>
              </div>
          {%- endcase -%}
        {%- endfor -%}

        {%- if section.blocks.size == 0 -%}
          <!-- Accordion padrão quando não há blocos configurados -->
          <div class="accordion-item">
            <button class="accordion-header active" onclick="toggleAccordion(this)">
              <span>Key Features</span>
              <span class="accordion-icon">-</span>
            </button>
            <div class="accordion-content active">
              <ul>
                <li>
                  <strong>Dimensions:</strong>
                  13.39" D × 7.87" W × 5.91" H</li>
                <li>
                  <strong>Weight Range:</strong>
                  5.5–27.5 lbs (2.5–12.5 kg) with 5 weight options</li>
                <li>
                  <strong>Increments:</strong>
                  Adjust in 5.5 lbs (2.5 kg) steps</li>
                <li>
                  <strong>Glide Tech Adjustment:</strong>
                  Switch weights in just 3 seconds with a smooth slide</li>
                <li>
                  <strong>Durable Build:</strong>
                  Steel plates with reinforced plastic tray for lasting durability</li>
                <li>
                  <strong>Included Items:</strong>
                  2 x dumbbells, 2 x trays, 1 x workout guide, 1 x manual</li>
              </ul>
            </div>
          </div>
        {%- endif -%}
      </div>

    </div>

    <script>
      // GALERIA SIMPLES - JavaScript puro
      let currentIndex = 0;
      let thumbnailsOffset = 0;
      const thumbnailWidth = 88; // 80px + 8px gap
      
      // Variáveis para drag
      let isDragging = false;
      let startX = 0;
      let startOffset = 0;
      let dragThreshold = 10; // Pixels mínimos para considerar como drag
      let hasMoved = false;
      
      // Variáveis para swipe na imagem principal
      let isSwiping = false;
      let swipeStartX = 0;
      let swipeStartY = 0;
      let swipeThreshold = 50; // Pixels mínimos para considerar como swipe
      
      // Variáveis para modal em tela cheia
      let fullscreenCurrentIndex = 0;
      
      // Função para trocar mídia principal (imagem ou vídeo)
      function changeMainMedia(mediaIndex, clickedThumb) {
        // Se estava fazendo drag, não executa o clique
        if (isDragging || hasMoved) {
          return;
        }
        
        const mediaData = {{ product.media | json }};
        const media = mediaData[mediaIndex];
        
        if (!media) return;
        
        const mainImage = document.getElementById('mainImage');
        const mainVideo = document.getElementById('mainVideo');
        const mainVideoContainer = document.getElementById('mainVideoContainer');
        
        // Remove active de todas as miniaturas
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        thumbnailContainers.forEach(container => container.classList.remove('active'));
        
        // Adiciona active na miniatura clicada
        if (clickedThumb) {
          clickedThumb.classList.add('active');
          currentIndex = mediaIndex;
        }
        
        if (media.media_type === 'video') {
          // Mostra vídeo e esconde imagem
          if (mainImage) mainImage.style.display = 'none';
          if (mainVideoContainer) {
            mainVideoContainer.style.display = 'flex';
        if (mainVideo) {
              mainVideo.src = media.sources[0].url;
              mainVideo.load(); // Recarrega o vídeo
              
              // Adiciona event listeners para controlar o ícone de play
              mainVideo.addEventListener('play', function() {
                mainVideoContainer.classList.add('video-playing');
              });
              
              mainVideo.addEventListener('pause', function() {
                mainVideoContainer.classList.remove('video-playing');
              });
              
              mainVideo.addEventListener('ended', function() {
                mainVideoContainer.classList.remove('video-playing');
              });
              
              // Auto-play quando o vídeo estiver carregado
              mainVideo.addEventListener('loadeddata', function() {
                mainVideo.play().catch(function(error) {
                  console.log('Auto-play não suportado ou bloqueado:', error);
                });
              });
            }
          }
        } else {
          // Mostra imagem e esconde vídeo
          if (mainVideoContainer) mainVideoContainer.style.display = 'none';
          if (mainImage) {
            mainImage.style.display = 'block';
            mainImage.src = media.preview_image ? 
              media.preview_image.src.replace('150', '800') : 
              media.src.replace('150', '800');
          }
        }
        
        updateMainNavButtons();
      }
      
      // Função para abrir visualização em tela cheia
      function openFullscreen() {
        console.log('openFullscreen chamada');
        const modal = document.getElementById('fullscreenModal');
        const fullscreenImage = document.getElementById('fullscreenImage');
        const fullscreenVideo = document.getElementById('fullscreenVideo');
        const mainImage = document.getElementById('mainImage');
        const mainVideo = document.getElementById('mainVideo');
        const mainVideoContainer = document.getElementById('mainVideoContainer');
        
        if (modal && fullscreenImage && fullscreenVideo) {
          console.log('Abrindo galeria em tela cheia...');
          
          const mediaData = {{ product.media | json }};
          const currentMedia = mediaData[currentIndex];
          
          fullscreenCurrentIndex = currentIndex;
          
          if (currentMedia && currentMedia.media_type === 'video') {
            // Mostra vídeo e esconde imagem no modal
            fullscreenImage.style.display = 'none';
            fullscreenVideo.style.display = 'block';
            fullscreenVideo.src = currentMedia.sources[0].url;
            fullscreenVideo.load();
            
            // Auto-play quando o vídeo estiver carregado
            fullscreenVideo.addEventListener('loadeddata', function() {
              fullscreenVideo.play().catch(function(error) {
                console.log('Auto-play não suportado ou bloqueado:', error);
              });
            });
            
            // Adiciona event listeners para controlar o ícone de play no fullscreen
            fullscreenVideo.addEventListener('play', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('pause', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('ended', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
          } else {
            // Mostra imagem e esconde vídeo no modal
            fullscreenVideo.style.display = 'none';
            fullscreenImage.style.display = 'block';
            if (mainImage) {
            fullscreenImage.src = mainImage.src.replace('800', '1200');
            fullscreenImage.alt = mainImage.alt;
            }
          }
          
          // Atualiza miniaturas ativas no modal
          updateFullscreenThumbnails();
          
          // Força a exibição do modal
          modal.style.display = 'flex';
          modal.classList.add('active');
          
          // Bloqueia scroll da página
          document.body.classList.add('modal-open');
          
          console.log('Galeria em tela cheia aberta com sucesso');
        } else {
          console.error('Elementos não encontrados para galeria em tela cheia');
        }
      }
      
      // Função para fechar visualização em tela cheia
      function closeFullscreen() {
        console.log('closeFullscreen chamada');
        const modal = document.getElementById('fullscreenModal');
        if (modal) {
          console.log('Fechando modal...');
          // Remove a classe active
          modal.classList.remove('active');
          // Força o display none
          modal.style.display = 'none';
          // Restaura o scroll da página
          document.body.classList.remove('modal-open');
          console.log('Modal fechado com sucesso');
        } else {
          console.error('Modal não encontrado para fechar');
        }
      }
      
      // Função para atualizar miniaturas no modal em tela cheia
      function updateFullscreenThumbnails() {
        const fullscreenThumbContainers = document.querySelectorAll('.fullscreen-thumb-container');
        fullscreenThumbContainers.forEach((container, index) => {
          container.classList.remove('active');
          if (index === fullscreenCurrentIndex) {
            container.classList.add('active');
            // Faz scroll para mostrar a miniatura ativa
            container.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
          }
        });
      }
      
      // Função para navegar no modal em tela cheia (com navegação cíclica)
      function changeFullscreenImage(direction) {
        const mediaData = {{ product.media | json }};
        if (mediaData.length === 0) return;
        
        // Navegação cíclica no modal
        fullscreenCurrentIndex += direction;
        if (fullscreenCurrentIndex >= mediaData.length) {
          fullscreenCurrentIndex = 0; // Volta para a primeira mídia
        } else if (fullscreenCurrentIndex < 0) {
          fullscreenCurrentIndex = mediaData.length - 1; // Vai para a última mídia
        }
        
        const currentMedia = mediaData[fullscreenCurrentIndex];
          const fullscreenImage = document.getElementById('fullscreenImage');
          const fullscreenVideo = document.getElementById('fullscreenVideo');
          
        if (currentMedia && fullscreenImage && fullscreenVideo) {
          if (currentMedia.media_type === 'video') {
            // Mostra vídeo e esconde imagem
            fullscreenImage.style.display = 'none';
            fullscreenVideo.style.display = 'block';
            fullscreenVideo.src = currentMedia.sources[0].url;
            fullscreenVideo.load();
            
            // Auto-play quando o vídeo estiver carregado
            fullscreenVideo.addEventListener('loadeddata', function() {
              fullscreenVideo.play().catch(function(error) {
                console.log('Auto-play não suportado ou bloqueado:', error);
              });
            });
            
            // Adiciona event listeners para controlar o ícone de play no fullscreen
            fullscreenVideo.addEventListener('play', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('pause', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('ended', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
          } else {
            // Mostra imagem e esconde vídeo
            fullscreenVideo.style.display = 'none';
              fullscreenImage.style.display = 'block';
            fullscreenImage.src = currentMedia.preview_image ? 
              currentMedia.preview_image.src.replace('150', '1200') : 
              currentMedia.src.replace('150', '1200');
            fullscreenImage.alt = currentMedia.alt || '';
          }
          
          // Atualiza miniaturas ativas
          updateFullscreenThumbnails();
        }
      }
      
      // Função para mudar mídia clicando na miniatura do fullscreen
      function changeFullscreenMediaByIndex(index) {
        const mediaData = {{ product.media | json }};
        if (index < 0 || index >= mediaData.length) return;
        
        fullscreenCurrentIndex = index;
        const currentMedia = mediaData[index];
        const fullscreenImage = document.getElementById('fullscreenImage');
        const fullscreenVideo = document.getElementById('fullscreenVideo');
        
        if (currentMedia && fullscreenImage && fullscreenVideo) {
          if (currentMedia.media_type === 'video') {
            // Mostra vídeo e esconde imagem
            fullscreenImage.style.display = 'none';
            fullscreenVideo.style.display = 'block';
            fullscreenVideo.src = currentMedia.sources[0].url;
            fullscreenVideo.load();
            
            // Auto-play quando o vídeo estiver carregado
            fullscreenVideo.addEventListener('loadeddata', function() {
              fullscreenVideo.play().catch(function(error) {
                console.log('Auto-play não suportado ou bloqueado:', error);
              });
            });
            
            // Adiciona event listeners para controlar o ícone de play no fullscreen
            fullscreenVideo.addEventListener('play', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('pause', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
            
            fullscreenVideo.addEventListener('ended', function() {
              // Remove qualquer classe de playing anterior
              document.querySelectorAll('.main-video-container').forEach(container => {
                container.classList.remove('video-playing');
              });
            });
        } else {
            // Mostra imagem e esconde vídeo
            fullscreenVideo.style.display = 'none';
            fullscreenImage.style.display = 'block';
            fullscreenImage.src = currentMedia.preview_image ? 
              currentMedia.preview_image.src.replace('150', '1200') : 
              currentMedia.src.replace('150', '1200');
            fullscreenImage.alt = currentMedia.alt || '';
        }
        
        // Atualiza miniaturas ativas
        updateFullscreenThumbnails();
        }
      }
      
      // Função para navegar pelas mídias principais (com navegação cíclica)
      function changeImage(direction) {
        const mediaData = {{ product.media | json }};
        if (mediaData.length === 0) return;
        
        // Navegação cíclica
        currentIndex += direction;
        if (currentIndex >= mediaData.length) {
          currentIndex = 0; // Volta para a primeira mídia
        } else if (currentIndex < 0) {
          currentIndex = mediaData.length - 1; // Vai para a última mídia
        }
        
        const currentMedia = mediaData[currentIndex];
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        const targetThumb = thumbnailContainers[currentIndex];
        
        if (targetThumb) {
          changeMainMedia(currentIndex, targetThumb);
          
          // Move as miniaturas para mostrar a ativa
          scrollToActiveThumbnail();
        }
      }
      
      // Função para navegar pelas miniaturas
      function scrollThumbs(direction) {
        const thumbnailsContainer = document.querySelector('.thumbnails');
        const thumbnailsScroll = document.querySelector('.thumbnails-scroll');
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        
        if (!thumbnailsContainer || !thumbnailsScroll || thumbnailContainers.length <= 5) return;
        
        const scrollWidth = thumbnailsScroll.offsetWidth;
        const totalWidth = thumbnailContainers.length * thumbnailWidth;
        const maxOffset = totalWidth - scrollWidth;
        
        thumbnailsOffset += direction * (thumbnailWidth * 2); // Move 2 miniaturas por vez
        thumbnailsOffset = Math.max(0, Math.min(maxOffset, thumbnailsOffset));
        
        thumbnailsContainer.style.transform = `translateX(-${thumbnailsOffset}px)`;
        
        // Atualiza estado dos botões
        updateMainNavButtons();
      }
      
      // Atualiza estado dos botões de navegação principais
      function updateMainNavButtons() {
        const prevBtn = document.querySelector('.main-prev');
        const nextBtn = document.querySelector('.main-next');
        const mediaData = {{ product.media | json }};
        
        if (!prevBtn || !nextBtn || !mediaData) return;
        
        prevBtn.disabled = currentIndex <= 0;
        nextBtn.disabled = currentIndex >= mediaData.length - 1;
      }
      
      // Função para mover as miniaturas para mostrar a ativa
      function scrollToActiveThumbnail() {
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        const thumbnailsScroll = document.querySelector('.thumbnails-scroll');
        
        if (thumbnailContainers.length <= 5 || !thumbnailsScroll) return;
        
        const activeThumb = thumbnailContainers[currentIndex];
        const scrollWidth = thumbnailsScroll.offsetWidth;
        const totalWidth = thumbnailContainers.length * thumbnailWidth;
        
        // Calcula a posição ideal para mostrar a miniatura ativa
        let idealOffset = currentIndex * thumbnailWidth - (scrollWidth / 2) + (thumbnailWidth / 2);
        idealOffset = Math.max(0, Math.min(totalWidth - scrollWidth, idealOffset));
        
        thumbnailsOffset = idealOffset;
        
        const thumbnailsContainer = document.querySelector('.thumbnails');
        if (thumbnailsContainer) {
          thumbnailsContainer.style.transform = `translateX(-${thumbnailsOffset}px)`;
        }
      }
      
      // Função para inicializar a mídia principal
      function initializeMainMedia() {
        const mediaData = {{ product.media | json }};
        const featuredMedia = {{ product.featured_media | json }};
        
        if (!featuredMedia || mediaData.length === 0) return;
        
        // Encontra o índice da mídia principal
        const featuredIndex = mediaData.findIndex(media => media.id === featuredMedia.id);
        if (featuredIndex !== -1) {
          currentIndex = featuredIndex;
          
          // Se a mídia principal é um vídeo, mostra o vídeo
          if (featuredMedia.media_type === 'video') {
            const mainVideoContainer = document.getElementById('mainVideoContainer');
        const mainVideo = document.getElementById('mainVideo');
            const mainImage = document.getElementById('mainImage');
            
            if (mainVideoContainer && mainVideo && mainImage) {
              mainImage.style.display = 'none';
              mainVideoContainer.style.display = 'flex';
              mainVideo.src = featuredMedia.sources[0].url;
              mainVideo.load();
              
              // Adiciona event listeners para controlar o ícone de play
              mainVideo.addEventListener('play', function() {
                mainVideoContainer.classList.add('video-playing');
              });
              
              mainVideo.addEventListener('pause', function() {
                mainVideoContainer.classList.remove('video-playing');
              });
              
              mainVideo.addEventListener('ended', function() {
                mainVideoContainer.classList.remove('video-playing');
              });
              
              // Auto-play quando o vídeo estiver carregado
              mainVideo.addEventListener('loadeddata', function() {
                mainVideo.play().catch(function(error) {
                  console.log('Auto-play não suportado ou bloqueado:', error);
                });
              });
            }
          }
          
          // Atualiza as miniaturas ativas
          const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
          thumbnailContainers.forEach((container, index) => {
            container.classList.remove('active');
            if (index === featuredIndex) {
              container.classList.add('active');
            }
          });
        }
      }
      
      // Inicializa quando o DOM estiver pronto
      document.addEventListener('DOMContentLoaded', function() {
        // Inicializa a mídia principal
        initializeMainMedia();
        updateMainNavButtons();
        
        // Adiciona eventos de drag nas miniaturas
        const thumbnailsContainer = document.querySelector('.thumbnails');
        if (thumbnailsContainer) {
          // Mouse events
          thumbnailsContainer.addEventListener('mousedown', startDrag);
          
          // Touch events para mobile
          thumbnailsContainer.addEventListener('touchstart', startDrag, { passive: false });
          
          // Previne seleção de texto durante drag
          thumbnailsContainer.addEventListener('selectstart', function(e) {
            if (isDragging) e.preventDefault();
          });
        }
        
        // Adiciona eventos de swipe na imagem principal
        const mainImageContainer = document.getElementById('mainImageContainer');
        if (mainImageContainer) {
          // Clique para abrir em tela cheia
          mainImageContainer.addEventListener('click', function(e) {
            console.log('Clique na imagem principal detectado');
            // Não abre se clicou nas setas de navegação
            if (e.target.closest('.main-nav')) {
              console.log('Clique nas setas, ignorando');
              return;
            }
            console.log('Abrindo tela cheia...');
            openFullscreen();
          });
          
          // Touch events para swipe
          mainImageContainer.addEventListener('touchstart', startSwipe, { passive: true });
          mainImageContainer.addEventListener('touchmove', onSwipe, { passive: false });
          mainImageContainer.addEventListener('touchend', stopSwipe, { passive: true });
          
          // Mouse events para swipe (desktop)
          mainImageContainer.addEventListener('mousedown', startSwipe);
          mainImageContainer.addEventListener('mousemove', onSwipe);
          mainImageContainer.addEventListener('mouseup', stopSwipe);
          mainImageContainer.addEventListener('mouseleave', stopSwipe);
        }
        
        // Event listeners para o modal em tela cheia
        const fullscreenModal = document.getElementById('fullscreenModal');
        if (fullscreenModal) {
          // Fecha com ESC
          document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && fullscreenModal.classList.contains('active')) {
              console.log('ESC pressionado, fechando modal');
              closeFullscreen();
            }
          });
          
          // Fecha clicando fora da galeria
          fullscreenModal.addEventListener('click', function(e) {
            // Só fecha se clicar diretamente no modal (fundo)
            if (e.target === fullscreenModal) {
              console.log('Clique fora da galeria, fechando modal');
              closeFullscreen();
            }
          });
          
          // Garante que o botão de fechar funcione
          const closeBtn = fullscreenModal.querySelector('.fullscreen-close');
          if (closeBtn) {
            closeBtn.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              console.log('Botão fechar clicado');
              closeFullscreen();
            });
          }
          
          // Adiciona suporte a swipe no modal fullscreen para mobile
          const fullscreenMainArea = fullscreenModal.querySelector('.fullscreen-main-area');
          if (fullscreenMainArea) {
            let fullscreenSwipeStartX = 0;
            let fullscreenSwipeStartY = 0;
            let isFullscreenSwiping = false;
            
            fullscreenMainArea.addEventListener('touchstart', function(e) {
              fullscreenSwipeStartX = e.touches[0].clientX;
              fullscreenSwipeStartY = e.touches[0].clientY;
              isFullscreenSwiping = false;
            }, { passive: true });
            
            fullscreenMainArea.addEventListener('touchmove', function(e) {
              if (!isFullscreenSwiping) {
                const currentX = e.touches[0].clientX;
                const currentY = e.touches[0].clientY;
                const deltaX = Math.abs(fullscreenSwipeStartX - currentX);
                const deltaY = Math.abs(fullscreenSwipeStartY - currentY);
                
                if (deltaX > 10 && deltaX > deltaY) {
                  isFullscreenSwiping = true;
                  e.preventDefault();
                }
              }
              
              if (isFullscreenSwiping) {
                e.preventDefault();
              }
            }, { passive: false });
            
            fullscreenMainArea.addEventListener('touchend', function(e) {
              if (isFullscreenSwiping) {
                const currentX = e.changedTouches[0].clientX;
                const deltaX = Math.abs(fullscreenSwipeStartX - currentX);
                
                if (deltaX > 50) {
                  if (fullscreenSwipeStartX > currentX) {
                    // Swipe para esquerda - próxima imagem
                    changeFullscreenImage(1);
                  } else {
                    // Swipe para direita - imagem anterior
                    changeFullscreenImage(-1);
                  }
                }
              }
              isFullscreenSwiping = false;
            }, { passive: true });
          }
        }
        
        // Esconde indicador de swipe após alguns segundos
        setTimeout(() => {
          const swipeIndicator = document.getElementById('swipeIndicator');
          if (swipeIndicator) {
            swipeIndicator.classList.add('hidden');
          }
        }, 3000);
        
        // Teste inicial do modal
        console.log('=== TESTE INICIAL DO MODAL ===');
        const testModal = document.getElementById('fullscreenModal');
        console.log('Modal encontrado no DOM:', testModal);
        if (testModal) {
          console.log('Modal HTML:', testModal.outerHTML);
          console.log('Modal display inicial:', testModal.style.display);
          console.log('Modal classes:', testModal.className);
        }
      });
      
      // Função para iniciar drag
      function startDrag(e) {
        isDragging = false;
        hasMoved = false;
        startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
        startOffset = thumbnailsOffset;
        
        // Adiciona eventos de movimento
        if (e.type === 'mousedown') {
          document.addEventListener('mousemove', onDrag);
          document.addEventListener('mouseup', stopDrag);
        } else {
          document.addEventListener('touchmove', onDrag);
          document.addEventListener('touchend', stopDrag);
        }
      }
      
      // Função para movimento durante drag
      function onDrag(e) {
        e.preventDefault();
        const currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
        const deltaX = Math.abs(startX - currentX);
        
        // Só ativa o drag se moveu mais que o threshold
        if (!hasMoved && deltaX > dragThreshold) {
          isDragging = true;
          hasMoved = true;
          
          // Adiciona cursor de arraste
          document.body.style.cursor = 'grabbing';
          document.body.style.userSelect = 'none';
        }
        
        if (!isDragging) return;
        
        const newOffset = startOffset + (startX - currentX);
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        const thumbnailsScroll = document.querySelector('.thumbnails-scroll');
        
        if (thumbnailsScroll && thumbnailContainers.length > 5) {
          const scrollWidth = thumbnailsScroll.offsetWidth;
          const totalWidth = thumbnailContainers.length * thumbnailWidth;
          const maxOffset = totalWidth - scrollWidth;
          
          thumbnailsOffset = Math.max(0, Math.min(maxOffset, newOffset));
          
          const thumbnailsContainer = document.querySelector('.thumbnails');
          if (thumbnailsContainer) {
            thumbnailsContainer.style.transform = `translateX(-${thumbnailsOffset}px)`;
          }
        }
      }
      
      // Função para parar drag
      function stopDrag() {
        // Se não moveu o suficiente, não era um drag
        if (!hasMoved) {
          isDragging = false;
          hasMoved = false;
        }
        
        isDragging = false;
        hasMoved = false;
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
        
        // Remove eventos de movimento
        document.removeEventListener('mousemove', onDrag);
        document.removeEventListener('mouseup', stopDrag);
        document.removeEventListener('touchmove', onDrag);
        document.removeEventListener('touchend', stopDrag);
        
        // Atualiza botões principais
        updateMainNavButtons();
        
        // Pequeno delay para garantir que o clique funcione
        setTimeout(() => {
          hasMoved = false;
        }, 50);
      }
      
      // Função para iniciar swipe na imagem principal
      function startSwipe(e) {
        isSwiping = false;
        swipeStartX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
        swipeStartY = e.type === 'mousedown' ? e.clientY : e.touches[0].clientY;
        
        // Não previne o evento por padrão - deixa o scroll funcionar inicialmente
      }
      
      // Função para movimento durante swipe
      function onSwipe(e) {
        if (!isSwiping) {
          const currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
          const currentY = e.type === 'mousemove' ? e.clientY : e.touches[0].clientY;
          
          const deltaX = Math.abs(swipeStartX - currentX);
          const deltaY = Math.abs(swipeStartY - currentY);
          
          // Detecta se é um swipe horizontal
          if (deltaX > 10 && deltaX > deltaY) {
            isSwiping = true;
            // Previne scroll apenas quando é um swipe horizontal
            e.preventDefault();
          }
        }
        
        if (isSwiping) {
          e.preventDefault();
        }
      }
      
      // Função para parar swipe
      function stopSwipe(e) {
        if (isSwiping) {
          const currentX = e.type === 'mouseup' ? e.clientX : e.changedTouches[0].clientX;
          const currentY = e.type === 'mouseup' ? e.clientY : e.changedTouches[0].clientY;
          
          const deltaX = Math.abs(swipeStartX - currentX);
          const deltaY = Math.abs(swipeStartY - currentY);
          
          // Só considera swipe se moveu mais horizontalmente que verticalmente
          if (deltaX > swipeThreshold && deltaX > deltaY) {
            if (swipeStartX > currentX) {
              // Swipe para esquerda - próxima imagem
              changeImage(1);
            } else {
              // Swipe para direita - imagem anterior
              changeImage(-1);
            }
          }
        }
        
        isSwiping = false;
      }
      
      // Atualiza botões quando a janela é redimensionada
      window.addEventListener('resize', function() {
        thumbnailsOffset = 0;
        const thumbnailsContainer = document.querySelector('.thumbnails');
        if (thumbnailsContainer) {
          thumbnailsContainer.style.transform = 'translateX(0px)';
        }
        updateMainNavButtons();
        });
      
      // PRODUCT VARIANTS & QUANTITY FUNCTIONS
      
      // Função para alterar quantidade
      function changeQuantity(change) {
        const input = document.getElementById('quantity');
        const currentValue = parseInt(input.value) || 1;
        const newValue = currentValue + change;
        const min = parseInt(input.min) || 1;
        const max = parseInt(input.max) || 999;
        
        if (newValue >= min && newValue <= max) {
          input.value = newValue;
          updateQuantityButtons();
        }
      }
      
      // Função para validar quantidade
      function validateQuantity() {
        const input = document.getElementById('quantity');
        const value = parseInt(input.value);
        const min = parseInt(input.min) || 1;
        const max = parseInt(input.max) || 999;
        
        if (value < min) {
          input.value = min;
        } else if (value > max) {
          input.value = max;
        }
        
        updateQuantityButtons();
      }
      
      // Atualiza estado dos botões de quantidade
      function updateQuantityButtons() {
        const input = document.getElementById('quantity');
        const minusBtn = document.querySelector('.qty-minus');
        const plusBtn = document.querySelector('.qty-plus');
        const value = parseInt(input.value);
        const min = parseInt(input.min) || 1;
        const max = parseInt(input.max) || 999;
        
        if (minusBtn) minusBtn.disabled = value <= min;
        if (plusBtn) plusBtn.disabled = value >= max;
      }
      
      // Função para atualizar variante
      function updateVariant() {
        console.log('updateVariant chamada');
        const options = [];
        
        // Coleta todas as opções selecionadas
        document.querySelectorAll('input[data-option-position]:checked').forEach(input => {
          const position = input.getAttribute('data-option-position');
          const value = input.getAttribute('data-option-value');
          options[position - 1] = value;
          console.log('Opção selecionada:', position, value);
        });
        
        // Encontra a variante correspondente
        const variants = {{ product.variants | json }};
        console.log('Variantes disponíveis:', variants);
        const selectedVariant = variants.find(variant => {
          return variant.options.every((option, index) => option === options[index]);
        });
        
        console.log('Variante selecionada:', selectedVariant);
        
        if (selectedVariant) {
          // Atualiza preço se necessário
          updatePrice(selectedVariant);
          // Atualiza disponibilidade
          updateAvailability(selectedVariant);
          
          // Atualiza imagem principal baseada na variante selecionada
          updateMainImageForVariant(selectedVariant);
          
          // Log detalhado dos preços para debug
          console.log('=== DEBUG PREÇOS ===');
          console.log('Preço atual:', selectedVariant.price);
          console.log('Preço de comparação:', selectedVariant.compare_at_price);
          console.log('Tem desconto:', selectedVariant.compare_at_price > selectedVariant.price);
        }
      }
      
      // Função para atualizar imagem principal baseada na variante
      function updateMainImageForVariant(variant) {
        console.log('updateMainImageForVariant chamada com:', variant);
        const mainImage = document.getElementById('mainImage');
        console.log('mainImage encontrada:', mainImage);
        console.log('mainImage tagName:', mainImage ? mainImage.tagName : 'N/A');
        console.log('mainImage id:', mainImage ? mainImage.id : 'N/A');
        
        if (!mainImage) {
          console.log('mainImage não encontrada');
          return;
        }
        
        // Verifica se a variante tem uma imagem associada
        if (variant.featured_image && variant.featured_image.src) {
          console.log('Variante tem imagem:', variant.featured_image);
          const newImageSrc = variant.featured_image.src;
          console.log('Nova imagem da variante:', newImageSrc);
          console.log('mainImage antes:', mainImage.src);
          mainImage.src = newImageSrc;
          console.log('mainImage depois:', mainImage.src);
          console.log('mainImage atual:', mainImage.src);
          
          // Força o redraw da imagem
          mainImage.style.opacity = '0.99';
          setTimeout(() => {
            mainImage.style.opacity = '1';
          }, 10);
          
          // Atualiza a miniatura ativa correspondente
          updateActiveThumbnail(newImageSrc);
        } else {
          console.log('Variante não tem imagem, usando mapeamento por cor');
          
          // Mapeia as variantes para as imagens correspondentes
          const variantImageMap = {
            'midnight': '{{ product.media[1] | image_url: width: 800 }}', // Imagem dos sinos pretos
            'sunrise': '{{ product.media[0] | image_url: width: 800 }}'   // Imagem dos sinos coloridos
          };
          
          console.log('VariantImageMap:', variantImageMap);
          
          // Verifica se a variante tem uma imagem mapeada
          const variantOption = variant.options[0]; // Assumindo que a primeira opção é a cor
          console.log('VariantOption:', variantOption);
          console.log('VariantOption lowercase:', variantOption.toLowerCase());
          
          if (variantImageMap[variantOption.toLowerCase()]) {
            const newImageSrc = variantImageMap[variantOption.toLowerCase()];
            console.log('Nova imagem do mapeamento:', newImageSrc);
            mainImage.src = newImageSrc;
            
            // Atualiza a miniatura ativa correspondente
            updateActiveThumbnail(newImageSrc);
          } else {
            console.log('Nenhuma imagem mapeada para:', variantOption);
            console.log('Opções disponíveis:', variant.options);
          }
        }
      }
      
      // Função para atualizar a miniatura ativa
      function updateActiveThumbnail(imageSrc) {
        const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
        thumbnailContainers.forEach((container, index) => {
          container.classList.remove('active');
          const thumbnail = container.querySelector('.thumbnail');
          // Se a miniatura corresponde à nova imagem principal, marca como ativa
          if (thumbnail && (thumbnail.src === imageSrc || thumbnail.src.replace('150', '800') === imageSrc)) {
            container.classList.add('active');
            // Atualiza o índice atual
            currentIndex = index;
          }
        });
        
        // Atualiza os botões de navegação
        updateMainNavButtons();
      }
      
      // Atualiza preço baseado na variante
      function updatePrice(variant) {
        console.log('Atualizando preço para variante:', variant);
        const priceElements = document.querySelectorAll('.product-price');
        const originalPriceElements = document.querySelectorAll('.product-price-original');
        
        priceElements.forEach(priceElement => {
          if (priceElement) {
            // Formata o preço corretamente usando o formato do Shopify
            const price = (variant.price / 100).toFixed(2);
            priceElement.textContent = `$${price}`;
            console.log('Preço atualizado para:', price);
          }
        });
        
        originalPriceElements.forEach(originalPriceElement => {
          if (originalPriceElement) {
            // Verifica se a variante tem preço de comparação (compare_at_price)
            if (variant.compare_at_price && variant.compare_at_price > variant.price) {
              const comparePrice = (variant.compare_at_price / 100).toFixed(2);
              originalPriceElement.textContent = `$${comparePrice}`;
              originalPriceElement.style.display = 'block';
              console.log('Preço original (riscado) atualizado para:', comparePrice);
            } else {
              // Esconde preço riscado se não houver desconto
              originalPriceElement.style.display = 'none';
              console.log('Preço riscado ocultado - sem desconto');
            }
          }
        });
      }
      
      // Atualiza disponibilidade
      function updateAvailability(variant) {
        const quantityInput = document.getElementById('quantity');
        
        if (quantityInput && variant.inventory_management) {
          quantityInput.max = variant.inventory_quantity || 999;
        }
      }
      
      // Inicializa quando o DOM estiver pronto
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM carregado, inicializando...');
        updateQuantityButtons();
        
        // Inicializa preços com a variante padrão
        initializePrices();
        
        // Adiciona event listeners para as opções de variante
        const variantOptions = document.querySelectorAll('.variant-option');
        console.log('Variantes encontradas:', variantOptions.length);
        
        // Log detalhado de cada opção encontrada
        variantOptions.forEach((option, index) => {
          console.log(`Opção ${index}:`, {
            id: option.id,
            value: option.value,
            name: option.name,
            checked: option.checked,
            classList: option.classList.toString()
          });
        });
        
        // Verifica se há problemas com seletores específicos
        console.log('=== VERIFICAÇÃO ESPECÍFICA ===');
        const midnightOption = document.querySelector('input[value="Midnight"]');
        const sunriseOption = document.querySelector('input[value="Sunrise"]');
        
        console.log('Opção Midnight encontrada:', midnightOption);
        console.log('Opção Sunrise encontrada:', sunriseOption);
        
        if (midnightOption) {
          console.log('Midnight - ID:', midnightOption.id);
          console.log('Midnight - Classes:', midnightOption.classList.toString());
          console.log('Midnight - Name:', midnightOption.name);
          console.log('Midnight - Value:', midnightOption.value);
        }
        
        if (sunriseOption) {
          console.log('Sunrise - ID:', sunriseOption.id);
          console.log('Sunrise - Classes:', sunriseOption.classList.toString());
          console.log('Sunrise - Name:', sunriseOption.name);
          console.log('Sunrise - Value:', sunriseOption.value);
        }
        
        // Variável para rastrear a opção atualmente selecionada
        let currentSelectedOption = '';
        
        variantOptions.forEach(option => {
          // Event listener para mudança de seleção
          option.addEventListener('change', function() {
            console.log('Opção alterada (change):', this.value, 'ID:', this.id);
            currentSelectedOption = this.value;
            updateVariant();
          });
          
          // Event listener para clique (para garantir que funcione sempre)
          option.addEventListener('click', function() {
            console.log('Opção clicada (click):', this.value, 'ID:', this.id);
            
            // Se a opção clicada é diferente da atual, executa updateVariant
            if (this.value !== currentSelectedOption) {
              currentSelectedOption = this.value;
              updateVariant();
            } else {
              // Se é a mesma opção, força a execução para garantir que a imagem seja atualizada
              console.log('Forçando atualização para opção já selecionada');
              setTimeout(() => {
                updateVariant();
              }, 50);
            }
          });
        });
        
        // Define a opção inicial selecionada
        const initialSelected = document.querySelector('.variant-option:checked');
        if (initialSelected) {
          currentSelectedOption = initialSelected.value;
          console.log('Opção inicial selecionada:', currentSelectedOption);
        }
        
        // Teste inicial
        console.log('Funções disponíveis:', typeof updateVariant, typeof updatePrice, typeof updateMainImageForVariant);
        
        // Teste manual para verificar se as opções estão funcionando
        setTimeout(() => {
          console.log('=== TESTE MANUAL ===');
          if (midnightOption) {
            console.log('Testando evento click na opção Midnight...');
            midnightOption.click();
          }
          if (sunriseOption) {
            console.log('Testando evento click na opção Sunrise...');
            sunriseOption.click();
          }
        }, 1000);
      });
          
      // ADD TO CART FUNCTION
      function addToCart() {
        const quantityInput = document.getElementById('quantity');
        const quantity = parseInt(quantityInput.value) || 1;
        const selectedVariant = getSelectedVariant();
        
        if (!selectedVariant) {
          alert('Please select all product options');
          return;
        }
        
        if (!selectedVariant.available) {
          alert('This product is currently unavailable');
          return;
        }
        
        const btn = document.querySelector('.add-to-cart-btn');
        const originalText = btn.textContent;
        
        // Feedback visual - loading
        btn.textContent = 'ADDING...';
        btn.disabled = true;
        btn.style.opacity = '0.7';
        
        // Preparar dados para o carrinho
        const formData = {
          'items': [{
            'id': selectedVariant.id,
            'quantity': quantity
          }]
        };
        
        // Fazer request para adicionar ao carrinho
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(formData)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Erro ao adicionar ao carrinho');
          }
          return response.json();
        })
        .then(data => {
          // Mostra notificação de sucesso PRIMEIRO
          if (window.CartNotification) {
            const productTitle = document.querySelector('.product-name')?.textContent || 'Product';
            window.CartNotification.success({
              title: "Product Added!",
              message: 'Join <a href="https://www.ativafit.com/pages/ativapeople-rewards-program" target="_blank" style="color: #eb701f; text-decoration: underline; font-weight: bold;">AtivaPeople</a> & get 10% off your first order.',
              type: "success"
            });
          }
          
          // Feedback visual do botão (após notificação aparecer)
          setTimeout(() => {
            btn.textContent = 'ADDED TO CART!';
            btn.style.background = '#c7d93b';
            
            // Atualizar contador do carrinho se existir
            updateCartCount();
            
            setTimeout(() => {
              btn.textContent = originalText;
              btn.style.background = '#EB701F';
              btn.disabled = false;
              btn.style.opacity = '1';
            }, 2000);
          }, 200);
        })
        .catch(error => {
          console.error('Erro:', error);
          
          // Mostra notificação de erro
          if (window.CartNotification) {
            window.CartNotification.error('Unable to add product to cart. Please try again.', 'Error adding product');
          }
          
          // Erro - feedback visual do botão
          btn.textContent = 'ERROR - TRY AGAIN';
          btn.style.background = '#dc3545';
          
          setTimeout(() => {
            btn.textContent = originalText;
            btn.style.background = '#EB701F';
            btn.disabled = false;
            btn.style.opacity = '1';
          }, 3000);
        });
      }
      
      function getSelectedVariant() {
        const variants = {{ product.variants | json }};
        
        // Se só existe uma variante (produto sem opções)
        if (variants.length === 1) {
          return variants[0];
        }
        
        // Coleta opções selecionadas
        const selectedOptions = [];
        const optionInputs = document.querySelectorAll('.option-values input[type="radio"]:checked');
        
        optionInputs.forEach(input => {
          const position = parseInt(input.dataset.optionPosition) - 1;
          const value = input.dataset.optionValue;
          selectedOptions[position] = value;
        });
        
        // Encontra a variante que corresponde às opções selecionadas
        const matchingVariant = variants.find(variant => {
          return variant.options.every((option, index) => {
            return option === selectedOptions[index];
          });
        });
        
        console.log('Variante selecionada para carrinho:', matchingVariant);
        return matchingVariant || variants[0]; // Fallback para primeira variante
      }
      
      // Função para atualizar contador do carrinho (opcional)
      function updateCartCount() {
        fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
              element.textContent = cart.item_count;
            });
          })
          .catch(error => {
            console.log('Erro ao atualizar contador do carrinho:', error);
          });
      }
      

       
       // ACCORDION FUNCTION
       function toggleAccordion(header) {
         const content = header.nextElementSibling;
         const icon = header.querySelector('.accordion-icon');
         const isActive = content.classList.contains('active');
         
         // Remove active de todos os headers e contents
         document.querySelectorAll('.accordion-header').forEach(item => {
           item.classList.remove('active');
         });
         
         document.querySelectorAll('.accordion-content').forEach(item => {
           item.classList.remove('active');
         });
         
         document.querySelectorAll('.accordion-icon').forEach(item => {
           item.textContent = '+';
         });
         
         // Abre o accordion clicado se não estava ativo
         if (!isActive) {
           header.classList.add('active');
           content.classList.add('active');
           icon.textContent = '-';
         } else {
           // Se estava ativo, fecha e remove o destaque laranja
           header.classList.remove('active');
           content.classList.remove('active');
           icon.textContent = '+';
         }
       }
      
      // Função para atualizar preços na inicialização
      function initializePrices() {
        const variants = {{ product.variants | json }};
        const initialVariant = variants.find(variant => variant.id === {{ product.selected_or_first_available_variant.id }});
        
        if (initialVariant) {
          console.log('Inicializando preços com variante:', initialVariant);
          updatePrice(initialVariant);
        }
      }
    </script>

  </section>
</section>

{% schema %}
  {
    "name": "Product GT528 Test",
    "settings": [
      {
        "type": "header",
        "content": "Product Information"
      },
      {
        "type": "text",
        "id": "product_title",
        "label": "Product Title",
        "info": "Override the default product title"
      },
      {
        "type": "textarea",
        "id": "product_subtitle",
        "label": "Product Subtitle",
        "default": "Sculpt & Tone with Style.\nYour Home, Your Boutique Gym.",
        "info": "Use \\n for line breaks"
      },
      {
        "type": "text",
        "id": "review_text",
        "label": "Review Text",
        "default": "5.0 (463 Reviews)"
      }, {
        "type": "text",
        "id": "feature_line_1",
        "label": "Feature Line 1",
        "default": "5 Weight Levels | 3-Second Switch"
      }, {
        "type": "text",
        "id": "feature_line_2",
        "label": "Feature Line 2",
        "default": "Comfort Grip | Compact Storage"
      }, {
        "type": "text",
        "id": "quantity_label",
        "label": "Quantity Label",
        "default": "Quantity"
      }, {
        "type": "textarea",
        "id": "payment_text",
        "label": "Payment Text",
        "default": "Pay in 4 interest-free installments, or from $48.65/mo with",
        "info": "Text that appears before the Shop Pay logo"
      }, {
        "type": "text",
        "id": "learn_more_text",
        "label": "Learn More Link Text",
        "default": "Learn more"
      }, {
        "type": "text",
        "id": "add_to_cart_text",
        "label": "Add to Cart Button Text",
        "default": "ADD TO CART"
      }, {
        "type": "header",
        "content": "Accordion Settings"
      }, {
        "type": "text",
        "id": "accordion_font_size",
        "label": "Accordion Content Font Size (px)",
        "default": "16",
        "info": "Font size for accordion content text (both desktop and mobile). Enter just the number, e.g. 18"
      }, {
        "type": "header",
        "content": "Benefits Section"
      }, {
        "type": "image_picker",
        "id": "benefit_icon_1",
        "label": "Benefit Icon 1",
        "info": "Icon for first benefit (Free Shipping)"
      }, {
        "type": "text",
        "id": "benefit_text_1",
        "label": "Benefit Text 1",
        "default": "Free Shipping within the U.S."
      }, {
        "type": "image_picker",
        "id": "benefit_icon_2",
        "label": "Benefit Icon 2",
        "info": "Icon for second benefit"
      }, {
        "type": "text",
        "id": "benefit_text_2",
        "label": "Benefit Text 2",
        "default": "Second Benefit Text"
      }, {
        "type": "image_picker",
        "id": "benefit_icon_3",
        "label": "Benefit Icon 3",
        "info": "Icon for third benefit"
      }, {
        "type": "text",
        "id": "benefit_text_3",
        "label": "Benefit Text 3",
        "default": "Lifetime Customer Support"
      }, {
        "type": "header",
        "content": "Benefit Popup Contents"
      }, {
        "type": "text",
        "id": "benefit_popup_title_1",
        "label": "Popup 1 Title",
        "default": "FREE SHIPPING"
      }, {
        "type": "html",
        "id": "benefit_popup_content_1",
        "label": "Popup 1 Content",
        "default": "<p>Our goal is to provide you with the greatest transportation options no matter where you live. Every day, we give services to hundreds of consumers worldwide, and we endeavor to provide you with the best possible service.</p><p><strong>Order Processing Time</strong></p><ul><li>Processing time is the time between when you place the order and we ship your order.</li><li>Most orders are processed within 48 business hours. Orders on the weekend may take longer.</li><li>Our warehouse operates Monday - Friday during standard business hours. During holidays we make every effort to reduce delays.</li></ul>"
      }, {
        "type": "text",
        "id": "benefit_popup_title_2",
        "label": "Popup 2 Title",
        "default": "45 DAYS PRICE PROTECTION"
      }, {
        "type": "html",
        "id": "benefit_popup_content_2",
        "label": "Popup 2 Content",
        "default": "<p>WalkingPad will give you a refund for the difference in price if the item you bought from our official website is available for a lower price within 45 days. Given that other versions of WalkingPads are sold in other countries, we will only protect your price for the same version in the same country you bought it.</p><p>Please <a href=\"#\">Contact us</a> with your order number if you need help.</p>"
      }, {
        "type": "text",
        "id": "benefit_popup_title_3",
        "label": "Popup 3 Title",
        "default": "LIFETIME CUSTOMER SUPPORT"
      }, {
        "type": "html",
        "id": "benefit_popup_content_3",
        "label": "Popup 3 Content",
        "default": "<p>We provide lifetime customer support for all products purchased from Ativafit. Our dedicated support team is here to help you with any questions, concerns, or technical assistance you may need.</p><p><strong>Support Channels</strong></p><ul><li>Email support: <a href=\"mailto:services@ativafit.com\">services@ativafit.com</a></li><li>Phone support: Available Monday-Friday, 9 AM - 5 PM EST</li><li>Live chat: Available on our website during business hours</li></ul>"
      }
    ],
    "blocks": [
      {
        "type": "accordion_item",
        "name": "Accordion Item",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Accordion Title",
            "default": "Accordion Title"
          },
          {
            "type": "select",
            "id": "content_type",
            "label": "Content Type",
            "options": [
              {
                "value": "list",
                "label": "List Items"
              }, {
                "value": "text",
                "label": "Text Content"
              }
            ],
            "default": "list"
          },
          {
            "type": "text",
            "id": "item_1",
            "label": "List Item 1",
            "default": "First list item"
          },
          {
            "type": "text",
            "id": "item_2",
            "label": "List Item 2",
            "default": "Second list item"
          }, {
            "type": "text",
            "id": "item_3",
            "label": "List Item 3",
            "default": "Third list item"
          }, {
            "type": "text",
            "id": "item_4",
            "label": "List Item 4",
            "default": "Fourth list item"
          }, {
            "type": "text",
            "id": "item_5",
            "label": "List Item 5",
            "default": "Fifth list item"
          }, {
            "type": "richtext",
            "id": "text_content",
            "label": "Text Content",
            "info": "Use this when content type is 'Text Content'"
          }, {
            "type": "header",
            "content": "Optional Link"
          }, {
            "type": "checkbox",
            "id": "show_link",
            "label": "Show Link",
            "default": false
          }, {
            "type": "text",
            "id": "link_text",
            "label": "Link Text",
            "default": "Learn more"
          }, {
            "type": "url",
            "id": "link_url",
            "label": "Link URL"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Product GT528 Test",
        "blocks": [
          {
            "type": "accordion_item",
            "settings": {
              "title": "Key Features",
              "content_type": "list",
              "item_1": "<strong>Dimensions:</strong> 13.39\" D × 7.87\" W × 5.91\" H",
              "item_2": "<strong>Weight Range:</strong> 5.5–27.5 lbs (2.5–12.5 kg) with 5 weight options",
              "item_3": "<strong>Increments:</strong> Adjust in 5.5 lbs (2.5 kg) steps",
              "item_4": "<strong>Glide Tech Adjustment:</strong> Switch weights in just 3 seconds with a smooth slide",
              "item_5": "<strong>Durable Build:</strong> Steel plates with reinforced plastic tray for lasting durability"
            }
          }, {
            "type": "accordion_item",
            "settings": {
              "title": "Shipping & Returns",
              "content_type": "list",
              "item_1": "<strong>Free Shipping:</strong> Standard shipping in 3–7 days (Continental US).",
              "item_2": "<strong>Easy Cancel:</strong> Cancel within 24 hours of purchase.",
              "item_3": "<strong>30-Day Returns:</strong> Unused items returnable within 30 days; buyer pays return shipping for personal reasons.",
              "item_4": "<strong>Fast Refunds:</strong> Issued to original payment or store credit.",
              "show_link": true,
              "link_text": "View full details on Shipping policy and Refund&Return",
              "link_url": "#"
            }
          }, {
            "type": "accordion_item",
            "settings": {
              "title": "Use Tips & Manual",
              "content_type": "list",
              "item_1": "Please adjust weights on the trays for safety.",
              "item_2": "Make sure to press down the red safety button completely and have the arrow pointed exactly to the desired weight number.",
              "item_3": "Please do not drop or throw weights after use.",
              "show_link": true,
              "link_text": "View and download the manual",
              "link_url": "#"
            }
          }, {
            "type": "accordion_item",
            "settings": {
              "title": "Warranty & Support",
              "content_type": "list",
              "item_1": "<strong>1-Year Warranty:</strong> Free replacement if your product arrives defective or faulty.",
              "item_2": "<strong>Extend to 2 Years:</strong> Join Ativa People for an extra year of coverage and exclusive rewards.",
              "item_3": "<strong>Support:</strong> Questions? Email services@ativafit.com"
            }
          }
        ]
      }
    ]
  }
{% endschema %}

<!-- Benefit Info Popups -->
<!-- Modal 1 -->
<div class="halo-popup" id="benefit-popup-1">
  <div class="halo-popup-wrapper">
    <div class="halo-popup-header">
      <h5 class="halo-popup-title">{{ section.settings.benefit_popup_title_1 }}</h5>
      <button type="button" class="halo-popup-close" data-close-benefit="1" aria-label="Close">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20" height="20"><path d="M 38.982422 6.9707031 A 2.0002 2.0002 0 0 0 37.585938 7.5859375 L 24 21.171875 L 10.414062 7.5859375 A 2.0002 2.0002 0 0 0 8.9785156 6.9804688 A 2.0002 2.0002 0 0 0 7.5859375 10.414062 L 21.171875 24 L 7.5859375 37.585938 A 2.0002 2.0002 0 1 0 10.414062 40.414062 L 24 26.828125 L 37.585938 40.414062 A 2.0002 2.0002 0 1 0 40.414062 37.585938 L 26.828125 24 L 40.414062 10.414062 A 2.0002 2.0002 0 0 0 38.982422 6.9707031 z"></path></svg>
        Close
      </button>
    </div>
    <div class="halo-popup-content">
      {{ section.settings.benefit_popup_content_1 }}
    </div>
  </div>
</div>

<!-- Modal 2 -->
<div class="halo-popup" id="benefit-popup-2">
  <div class="halo-popup-wrapper">
    <div class="halo-popup-header">
      <h5 class="halo-popup-title">{{ section.settings.benefit_popup_title_2 }}</h5>
      <button type="button" class="halo-popup-close" data-close-benefit="2" aria-label="Close">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20" height="20"><path d="M 38.982422 6.9707031 A 2.0002 2.0002 0 0 0 37.585938 7.5859375 L 24 21.171875 L 10.414062 7.5859375 A 2.0002 2.0002 0 0 0 8.9785156 6.9804688 A 2.0002 2.0002 0 0 0 7.5859375 10.414062 L 21.171875 24 L 7.5859375 37.585938 A 2.0002 2.0002 0 1 0 10.414062 40.414062 L 24 26.828125 L 37.585938 40.414062 A 2.0002 2.0002 0 1 0 40.414062 37.585938 L 26.828125 24 L 40.414062 10.414062 A 2.0002 2.0002 0 0 0 38.982422 6.9707031 z"></path></svg>
        Close
      </button>
    </div>
    <div class="halo-popup-content">
      {{ section.settings.benefit_popup_content_2 }}
    </div>
  </div>
</div>

<!-- Modal 3 -->
<div class="halo-popup" id="benefit-popup-3">
  <div class="halo-popup-wrapper">
    <div class="halo-popup-header">
      <h5 class="halo-popup-title">{{ section.settings.benefit_popup_title_3 }}</h5>
      <button type="button" class="halo-popup-close" data-close-benefit="3" aria-label="Close">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20" height="20"><path d="M 38.982422 6.9707031 A 2.0002 2.0002 0 0 0 37.585938 7.5859375 L 24 21.171875 L 10.414062 7.5859375 A 2.0002 2.0002 0 0 0 8.9785156 6.9804688 A 2.0002 2.0002 0 0 0 7.5859375 10.414062 L 21.171875 24 L 7.5859375 37.585938 A 2.0002 2.0002 0 1 0 10.414062 40.414062 L 24 26.828125 L 37.585938 40.414062 A 2.0002 2.0002 0 1 0 40.414062 37.585938 L 26.828125 24 L 40.414062 10.414062 A 2.0002 2.0002 0 0 0 38.982422 6.9707031 z"></path></svg>
        Close
      </button>
    </div>
    <div class="halo-popup-content">
      {{ section.settings.benefit_popup_content_3 }}
    </div>
  </div>
</div>

<style>
/* Benefit Popup Styles */
.halo-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.halo-popup.is-show {
  opacity: 1;
  visibility: visible;
}

.halo-popup-wrapper {
  background: #fff;
  border-radius: 8px;
  max-width: 800px;
  max-height: 90vh;
  width: 90%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  position: relative;
}

.halo-popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #e5e5e5;
}

.halo-popup-title {
  margin: 0;
  font-size: 20px;
  font-weight: 600;
  color: #232323;
}

.halo-popup-close {
  background: none;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 4px 8px;
  font-size: 14px;
  color: #666;
  transition: color 0.2s ease;
}

.halo-popup-close:hover {
  color: #EB701F;
}

.halo-popup-close svg {
  width: 20px;
  height: 20px;
  fill: currentColor;
}

.halo-popup-content {
  padding: 24px;
  overflow-y: auto;
  flex: 1;
}

.halo-popup-content p {
  margin: 0 0 16px 0;
  line-height: 1.6;
  color: #4d4d4d;
}

.halo-popup-content p:last-child {
  margin-bottom: 0;
}

.halo-popup-content strong {
  color: #232323;
  font-weight: 600;
}

.halo-popup-content ul {
  margin: 0 0 16px 0;
  padding-left: 24px;
  color: #4d4d4d;
}

.halo-popup-content li {
  margin-bottom: 8px;
  line-height: 1.6;
}

.halo-popup-content table {
  margin: 16px 0;
}

.halo-popup-content a {
  color: #EB701F;
  text-decoration: underline;
}

.halo-popup-content a:hover {
  color: #d65b0f;
}

@media (max-width: 768px) {
  .halo-popup-wrapper {
    width: 95%;
    max-height: 85vh;
  }
  
  .halo-popup-header {
    padding: 16px 20px;
  }
  
  .halo-popup-title {
    font-size: 18px;
  }
  
  .halo-popup-content {
    padding: 20px;
  }
  
  .halo-popup-content table {
    font-size: 12px;
  }
}
</style>

<script>
// Benefit Popup Handler
document.addEventListener('DOMContentLoaded', function() {
  const benefitButtons = document.querySelectorAll('.benefit-info-btn');
  
  benefitButtons.forEach((button, index) => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      const popupId = 'benefit-popup-' + (index + 1);
      const popup = document.getElementById(popupId);
      
      if (popup) {
        popup.classList.add('is-show');
        document.body.style.overflow = 'hidden';
      }
    });
  });
  
  // Close buttons
  const closeButtons = document.querySelectorAll('[data-close-benefit]');
  closeButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      const benefitId = button.getAttribute('data-close-benefit');
      const popup = document.getElementById('benefit-popup-' + benefitId);
      
      if (popup) {
        popup.classList.remove('is-show');
        document.body.style.overflow = '';
      }
    });
  });
  
  // Close on backdrop click
  const popups = document.querySelectorAll('.halo-popup');
  popups.forEach(popup => {
    popup.addEventListener('click', function(e) {
      if (e.target === popup) {
        popup.classList.remove('is-show');
        document.body.style.overflow = '';
      }
    });
  });
  
  // Close on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      popups.forEach(popup => {
        if (popup.classList.contains('is-show')) {
          popup.classList.remove('is-show');
          document.body.style.overflow = '';
        }
      });
    }
  });
});
</script>