{%- liquid
  assign section_id = 'custom-bundle-' | append: section.id
-%}

<section
  id="{{ section_id }}"
  class="custom-bundle"
  style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  <div class="custom-bundle-container">
    <!-- Dynamic Title -->
    <h2 class="bundle-title" id="bundle-title">
      <!-- Will be populated dynamically -->
    </h2>

    <!-- Dynamic Subtitle -->
    <p class="bundle-subtitle" id="bundle-subtitle">
      <!-- Will be populated dynamically -->
    </p>

    <!-- Main Section: Products + Pricing Side by Side -->
    <div class="bundle-main-section">
      <!-- Products Grid: item + item + item -->
      <div class="bundle-products-grid" id="bundle-products-grid">
        <!-- Products will be populated by JavaScript -->
      </div>

      <!-- Pricing Section - Right Side -->
      <div class="bundle-pricing-section">
        <div class="bundle-pricing">
          <span class="bundle-price" id="bundle-price"></span>
          <span class="bundle-original-price" id="bundle-original-price"></span>
        </div>
        <div class="bundle-savings">
          <span class="bundle-savings-text" id="bundle-savings-text"></span>
        </div>
        <!-- Shop Bundle Button -->
        <div class="bundle-cta-section">
          <button
            class="bundle-cta-button"
            id="bundle-cta-button"
            onclick="addBundleToCart()">
            <span id="bundle-button-text">Shop Bundle</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Product Checkboxes List -->
    <div class="bundle-product-list" id="bundle-product-list">
      <!-- Product checkboxes will be populated by JavaScript -->
    </div>
  </div>

  <!-- Hidden original component (for data extraction) -->
  <div id="original-bundle-container" style="display: none !important; visibility: hidden !important; height: 0 !important; overflow: hidden !important;">
    <!-- Original app component will be moved here -->
  </div>
</section>

<style>
  .custom-bundle {
    background: #fff;
    width: 100%;
    position: relative;
  }

  /* Force hide original bundle app components */
  .cbb-frequently-bought-container,
  .cbb-frequently-bought-title,
  .cbb-frequently-bought-recommendations-container,
  .cbb-frequently-bought-form,
  .cbb-frequently-bought-selector-list,
  [class*="cbb-frequently-bought"],
  [id*="cbb-frequently-bought"] {
    position: absolute !important;
    left: -9999px !important;
    top: -9999px !important;
    width: 1px !important;
    height: 1px !important;
    opacity: 0 !important;
    visibility: hidden !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    pointer-events: none !important;
    z-index: -9999 !important;
    transform: scale(0) !important;
    margin: 0 !important;
    padding: 0 !important;
    border: none !important;
    background: transparent !important;
    max-width: 1px !important;
    max-height: 1px !important;
  }

  /* Exception: Keep our hidden container visible for functionality */
  #original-bundle-container {
    display: none !important;
    visibility: hidden !important;
    height: 0 !important;
    overflow: hidden !important;
  }

  .custom-bundle-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    text-align: center;
  }

  .bundle-title {
    font-family: Barlow
    , sans-serif;
    font-weight: 700;
    font-size: 36px;
    line-height: 40px;
    letter-spacing: 0;
    text-align: center;
    color: #000;
    margin: 0 0 10px;
  }

  .bundle-title .highlight {
    color: #EB701F;
  }

  .bundle-subtitle {
    font-family: Barlow
    , sans-serif;
    font-weight: 400;
    font-size: 18px;
    line-height: 22px;
    letter-spacing: 0;
    text-align: center;
    color: #EB701F;
    margin: 0 0 40px;
  }

  /* Main Bundle Layout: Products + Pricing Side by Side */
  .bundle-main-section {
    display: flex;
    align-items: center;
    gap: 40px;
    margin-bottom: 40px;
    justify-content: center;
  }

  /* Products Grid: item + item + item layout */
  .bundle-products-grid {
    display: flex;
    align-items: center;
    max-width: 600px;
  }

  .bundle-product-item {
    background: #F5F5F5;
    border-radius: 8px;
    padding: 15px;
    min-width: 200px;
    max-width: 200px;
    height: 200px;
    text-align: center;
    flex: 1;
  }

  .bundle-product-image {
    width: 100%;
    height: 100%;
    margin: 0 auto;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-color: #fff;
    border-radius: 8px;
  }

  .bundle-plus-icon {
    font-size: 24px;
    color: #000;
    font-weight: 300;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 30px;
    height: 80px;
  }

  /* Pricing Section - Right Side */
  .bundle-pricing-section {
    flex-shrink: 0;
    text-align: center;
    min-width: 300px;
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: start;
  }

  .bundle-pricing {
    margin-bottom: 0;
  }

  .bundle-price {
    font-family: Barlow
    , sans-serif;
    font-weight: 700;
    font-size: 32px;
    line-height: 36px;
    color: #CF0E0E;
    margin-right: 15px;
  }

  .bundle-original-price {
    font-family: Barlow
    , sans-serif;
    font-weight: 400;
    font-size: 24px;
    line-height: 28px;
    color: #999;
    text-decoration: line-through;
  }

  .bundle-savings {
    margin-bottom: 0 !important;
  }

  .bundle-savings-text {
    font-family: Barlow
    , sans-serif;
    font-weight: 600;
    font-size: 18px;
    line-height: 22px;
    color: #EB701F;
    text-transform: uppercase;
    background: #f5f5f5;
    padding: 8px 16px;
    border-radius: 50px;
    display: inline-block;
  }

  /* Shop Bundle Button */
  .bundle-cta-section {
    margin: 20px 0 0;
  }

  .bundle-cta-button {
    background: #EB701F;
    color: #fff;
    border: none;
    border-radius: 50px;
    padding: 16px 60px;
    font-family: Barlow
    , sans-serif;
    font-weight: 700;
    font-size: 18px;
    line-height: 22px;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    max-width: 280px;
  }

  .bundle-cta-button:hover {
    background: #d55a0f;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(235, 112, 31, 0.3);
  }

  .bundle-cta-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Product Checkboxes List */
  .bundle-product-list {
    max-width: 700px;
    margin: 40px auto 0;
    text-align: left;
  }

  .bundle-product-item-checkbox {
    display: flex;
    align-items: center;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
  }

  .bundle-product-item-checkbox:last-child {
    border-bottom: none;
  }

  .bundle-checkbox {
    width: 20px;
    height: 20px;
    margin-right: 15px;
    accent-color: #EB701F;
    flex-shrink: 0;
  }

  .bundle-product-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
  }

  /* Desktop: manter layout horizontal */
  .bundle-product-details {
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
  }

  .bundle-product-name {
    font-family: Barlow
    , sans-serif;
    font-weight: 500;
    font-size: 16px;
    line-height: 20px;
    color: #333;
    margin: 0;
    min-width: 200px;
    flex-shrink: 0;
  }

  .bundle-product-name.this-item {
    font-weight: 700;
    color: #000;
  }

  .bundle-product-variant {
    margin: 0;
    flex-shrink: 0;
  }

  .bundle-variant-select {
    padding: 5px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-family: Barlow
    , sans-serif;
    font-size: 14px;
    background: #fff;
  }

  .bundle-product-price {
    font-family: Barlow
    , sans-serif;
    font-weight: 600;
    font-size: 16px;
    line-height: 20px;
    margin: 0;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .bundle-product-price .sale-price {
    color: #CF0E0E;
  }

  .bundle-product-price .regular-price {
    color: #EB701F;
  }

  .bundle-product-price .compare-price {
    color: #999;
    text-decoration: line-through;
    font-size: 14px;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .bundle-main-section {
      flex-direction: column;
      gap: 30px;
      align-items: center;
    }

    .bundle-products-grid {
      max-width: 100%;
      justify-content: center;
    }

    .bundle-pricing-section {
      min-width: auto;
      max-width: 400px;
    }
  }

  @media (max-width: 768px) {
    .custom-bundle-container {
      padding: 0 20px;
    }

    .bundle-title {
      font-size: 28px;
      line-height: 32px;
      margin-bottom: 15px;
    }

    .bundle-subtitle {
      font-size: 16px;
      line-height: 20px;
      margin-bottom: 30px;
    }

    .bundle-main-section {
      gap: 25px;
    }

    .bundle-products-grid {
      flex-direction: row;
      gap: 8px;
      max-width: 100%;
      justify-content: center;
      flex-wrap: wrap;
    }

    .bundle-product-item {
      min-width: 80px;
      max-width: 80px;
      width: 80px;
      height: 80px;
      padding: 8px;
      border-radius: 12px;
    }

    .bundle-product-image {
      border-radius: 8px;
    }

    .bundle-plus-icon {
      font-size: 18px;
      margin: 0 8px;
      height: 80px;
      min-width: 20px;
    }

    .bundle-pricing-section {
      width: 100%;
      max-width: 100%;
      text-align: center;
      align-items: center;
    }

    .bundle-price {
      font-size: 28px;
      line-height: 32px;
    }

    .bundle-original-price {
      font-size: 20px;
      line-height: 24px;
    }

    .bundle-cta-button {
      padding: 16px 40px;
      font-size: 16px;
      max-width: 100%;
      width: 100%;
    }

    /* Professional Mobile Checkbox Design */
    .bundle-product-list {
      margin: 30px auto 0;
      max-width: 100%;
    }

    .bundle-product-item-checkbox {
      background: #fff;
      border: 1px solid #e5e5e5;
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
      transition: all 0.2s ease;
    }

    .bundle-product-item-checkbox:hover {
      border-color: #EB701F;
      box-shadow: 0 4px 12px rgba(235, 112, 31, 0.1);
    }

    .bundle-product-item-checkbox:last-child {
      margin-bottom: 0;
    }

    .bundle-checkbox {
      width: 20px;
      height: 20px;
      margin-right: 12px;
      accent-color: #EB701F;
      flex-shrink: 0;
    }

    .bundle-product-info {
      width: 100%;
      display: block;
    }

    .bundle-product-name {
      font-size: 16px;
      font-weight: 600;
      line-height: 20px;
      margin-bottom: 8px;
      color: #333;
    }

    .bundle-product-name.this-item {
      color: #EB701F;
      font-weight: 700;
    }

    .bundle-product-details {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 12px;
      flex-wrap: wrap;
    }

    .bundle-product-variant {
      flex: 1;
      min-width: 120px;
    }

    .bundle-variant-select {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 14px;
      background: #fff;
      color: #333;
    }

    .bundle-product-price {
      flex-shrink: 0;
      font-size: 16px;
      font-weight: 600;
      text-align: right;
    }
  }

  @media (max-width: 480px) {
    .custom-bundle-container {
      padding: 0 15px;
    }

    .bundle-title {
      font-size: 24px;
      line-height: 28px;
    }

    .bundle-subtitle {
      font-size: 14px;
      line-height: 18px;
    }

    .bundle-main-section {
      gap: 20px;
    }

    .bundle-products-grid {
      gap: 6px;
    }

    .bundle-product-item {
      min-width: 70px;
      max-width: 70px;
      width: 70px;
      height: 70px;
      padding: 6px;
    }

    .bundle-plus-icon {
      font-size: 16px;
      margin: 0 6px;
      height: 70px;
      min-width: 18px;
    }

    .bundle-price {
      font-size: 24px;
      line-height: 28px;
    }

    .bundle-original-price {
      font-size: 18px;
      line-height: 22px;
    }

    .bundle-cta-button {
      padding: 14px 30px;
      font-size: 15px;
    }

    .bundle-product-item-checkbox {
      padding: 14px;
      margin-bottom: 10px;
    }

    .bundle-product-name {
      font-size: 15px;
      line-height: 19px;
    }

    .bundle-product-details {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .bundle-product-variant {
      width: 100%;
    }

    .bundle-product-price {
      align-self: flex-end;
      text-align: right;
    }
  }
</style>

<script>
  let bundleData = null;
  let originalBundleElement = null;
  
  document.addEventListener('DOMContentLoaded', function() {
  initializeCustomBundle();
  });
  
  function initializeCustomBundle() {
  // Wait for original bundle app to load
  let attempts = 0;
  const maxAttempts = 20;
  
  const checkForBundle = setInterval(() => {
    attempts++;
    const originalBundle = document.querySelector('.cbb-frequently-bought-container');
    
    if (originalBundle) {
      clearInterval(checkForBundle);
      console.log('Bundle app detected, initializing custom interface...');
      
      // Store reference to original
      originalBundleElement = originalBundle;
      
      // Wait a bit for the app to fully initialize
      setTimeout(() => {
        // Hide original bundle completely from user view but keep it functional
        originalBundle.style.setProperty('position', 'absolute', 'important');
        originalBundle.style.setProperty('left', '-9999px', 'important');
        originalBundle.style.setProperty('top', '-9999px', 'important');
        originalBundle.style.setProperty('width', '1px', 'important');
        originalBundle.style.setProperty('height', '1px', 'important');
        originalBundle.style.setProperty('opacity', '0', 'important');
        originalBundle.style.setProperty('visibility', 'hidden', 'important');
        originalBundle.style.setProperty('overflow', 'hidden', 'important');
        originalBundle.style.setProperty('clip', 'rect(0, 0, 0, 0)', 'important');
        originalBundle.style.setProperty('pointer-events', 'none', 'important');
        originalBundle.style.setProperty('z-index', '-9999', 'important');
        originalBundle.style.setProperty('transform', 'scale(0)', 'important');
        originalBundle.style.setProperty('margin', '0', 'important');
        originalBundle.style.setProperty('padding', '0', 'important');
        originalBundle.style.setProperty('border', 'none', 'important');
        originalBundle.style.setProperty('background', 'transparent', 'important');
        originalBundle.style.setProperty('max-width', '1px', 'important');
        originalBundle.style.setProperty('max-height', '1px', 'important');
        originalBundle.style.setProperty('display', 'block', 'important'); // Keep display block for functionality
        
        // Also hide any parent containers that might show
        let parent = originalBundle.parentElement;
        while (parent && parent !== document.body) {
          if (parent.classList && (parent.classList.contains('cbb-') || parent.id.includes('cbb-'))) {
            parent.style.setProperty('position', 'absolute', 'important');
            parent.style.setProperty('left', '-9999px', 'important');
            parent.style.setProperty('opacity', '0', 'important');
            parent.style.setProperty('visibility', 'hidden', 'important');
            parent.style.setProperty('pointer-events', 'none', 'important');
            parent.style.setProperty('z-index', '-9999', 'important');
          }
          parent = parent.parentElement;
        }
        
        // Create a clone ONLY for data extraction
        const hiddenContainer = document.getElementById('original-bundle-container');
        if (hiddenContainer) {
          hiddenContainer.appendChild(originalBundle.cloneNode(true));
        }
        
        // Extract data and populate custom bundle
        extractAndPopulateBundle();
        
        // Additional cleanup: hide any other bundle elements that might appear
        setTimeout(() => {
          hideAllBundleElements();
        }, 2000);
      }, 1000);
      
    } else if (attempts >= maxAttempts) {
      clearInterval(checkForBundle);
      console.log('Bundle app not found after maximum attempts');
      // Hide custom bundle if no app found
      const customBundle = document.querySelector('.custom-bundle');
      if (customBundle) {
        customBundle.style.display = 'none';
      }
    }
  }, 500);
  }
  
  function extractAndPopulateBundle() {
  const hiddenBundle = document.querySelector('#original-bundle-container .cbb-frequently-bought-container');
  if (!hiddenBundle) {
    console.error('Hidden bundle not found');
    return;
  }
  
  try {
    // Extract dynamic title and subtitle
    const originalTitle = hiddenBundle.querySelector('.cbb-frequently-bought-title');
    const originalSubtitle = hiddenBundle.querySelector('.cbb-frequently-bought-discount-message');
    
    // Extract products data
    const products = [];
    const productImages = hiddenBundle.querySelectorAll('.cbb-frequently-bought-product-image');
    const productCheckboxes = hiddenBundle.querySelectorAll('.cbb-frequently-bought-selector-input');
    const productLabels = hiddenBundle.querySelectorAll('.cbb-frequently-bought-selector-label-name');
    const productPriceContainers = hiddenBundle.querySelectorAll('li[style*="list-style-type: none"]');
    
    // Extract product data dynamically
    productCheckboxes.forEach((checkbox, index) => {
      const label = productLabels[index];
      const priceContainer = productPriceContainers[index];
      
      if (label && priceContainer) {
        const productName = label.textContent.trim();
        const isThisItem = productName.includes('This Item:');
        const cleanName = isThisItem ? productName.replace('This Item: ', '') : productName;
        
        // Extract prices dynamically
        const salePrice = priceContainer.querySelector('.cbb-frequently-bought-selector-label-sale-price .money');
        const regularPrice = priceContainer.querySelector('.cbb-frequently-bought-selector-label-regular-price .money');
        const comparePrice = priceContainer.querySelector('.cbb-frequently-bought-selector-label-compare-at-price .money');
        
        // Extract image dynamically
        let imageUrl = '';
        if (productImages[index]) {
          const bgImage = productImages[index].style.backgroundImage;
          if (bgImage) {
            imageUrl = bgImage.replace(/url\(['"]?(.*?)['"]?\)/, '$1');
          }
        }
        
        // Extract variant selector dynamically
        const variantSelect = priceContainer.querySelector('select');
        let variants = [];
        if (variantSelect) {
          variants = Array.from(variantSelect.options).map(option => ({
            id: option.getAttribute('data-variant-id'),
            name: option.textContent.trim(),
            selected: option.selected
          }));
        }
        
        products.push({
          id: checkbox.id,
          name: cleanName,
          isThisItem: isThisItem,
          checked: checkbox.checked,
          image: imageUrl,
          salePrice: salePrice ? salePrice.textContent.trim() : '',
          regularPrice: regularPrice ? regularPrice.textContent.trim() : '',
          comparePrice: comparePrice ? comparePrice.textContent.trim() : '',
          variants: variants,
          originalCheckbox: checkbox,
          originalSelect: variantSelect
        });
      }
    });
    
    // Extract pricing dynamically
    const totalPriceElement = hiddenBundle.querySelector('.cbb-frequently-bought-total-price-sale-price .money');
    const totalOriginalPriceElement = hiddenBundle.querySelector('.cbb-frequently-bought-total-price-was-price .money');
    
    bundleData = {
      title: originalTitle ? originalTitle.textContent.trim() : 'Frequently Bought Together',
      subtitle: originalSubtitle ? originalSubtitle.textContent.trim() : '',
      products: products,
      totalPrice: totalPriceElement ? totalPriceElement.textContent.trim() : '',
      totalOriginalPrice: totalOriginalPriceElement ? totalOriginalPriceElement.textContent.trim() : '',
      originalButton: hiddenBundle.querySelector('.cbb-frequently-bought-add-button')
    };
    
    console.log('Bundle data extracted:', bundleData);
    
    // Populate custom bundle
    populateCustomBundle();
    
    // Setup event listeners
    setupBundleEventListeners();
    
    // Teste inicial dos event listeners
    console.log('Bundle inicializado. Testando event listeners...');
    const testCheckbox = document.querySelector('.bundle-checkbox');
    const testSelect = document.querySelector('.bundle-variant-select');
    console.log('Checkbox encontrado:', testCheckbox);
    console.log('Select encontrado:', testSelect);
    
    // Força atualização inicial dos preços
    setTimeout(() => {
      console.log('Fazendo atualização inicial dos preços...');
      if (window.updateBundlePrices) {
        window.updateBundlePrices();
      }
    }, 1000);
    
  } catch (error) {
    console.error('Error extracting bundle data:', error);
  }
  }
  
  function populateCustomBundle() {
  if (!bundleData) return;
  
  // Populate title and subtitle dynamically
  const titleElement = document.getElementById('bundle-title');
  const subtitleElement = document.getElementById('bundle-subtitle');
  
  if (titleElement) {
    titleElement.innerHTML = bundleData.title;
  }
  
  if (subtitleElement) {
    subtitleElement.innerHTML = bundleData.subtitle;
    if (!bundleData.subtitle) {
      subtitleElement.style.display = 'none';
    }
  }
  
  // Populate products grid: item + item + item
  const productsGrid = document.getElementById('bundle-products-grid');
  if (productsGrid && bundleData.products.length > 0) {
    let gridHTML = '';
    
    bundleData.products.forEach((product, index) => {
      if (index > 0) {
        gridHTML += '<div class="bundle-plus-icon">+</div>';
      }
      
      gridHTML += `
        <div class="bundle-product-item">
          <div class="bundle-product-image" style="background-image: url('${product.image}')"></div>
        </div>
      `;
    });
    
    productsGrid.innerHTML = gridHTML;
  }
  
  // Populate product checkboxes list
  const productList = document.getElementById('bundle-product-list');
  if (productList) {
    let listHTML = '';
    
    bundleData.products.forEach((product) => {
      // Verifica se é a variante Midnight para mostrar o preço riscado
      const isCurrentlyMidnight = product.variants.some(v => v.selected && v.name === 'Midnight');
      
      const priceHTML = `
        ${product.salePrice ? `<span class="sale-price">${product.salePrice}</span>` : ''}
        ${product.regularPrice ? `<span class="regular-price">${product.regularPrice}</span>` : ''}
        ${product.comparePrice && isCurrentlyMidnight ? `<span class="compare-price">${product.comparePrice}</span>` : ''}
      `;
      
      const variantHTML = product.variants.length > 1 ? `
        <div class="bundle-product-variant">
          <select class="bundle-variant-select" data-product-id="${product.id}">
            ${product.variants.map(variant => `
              <option value="${variant.id}" ${variant.selected ? 'selected' : ''}>${variant.name}</option>
            `).join('')}
          </select>
        </div>
      ` : '';
      
      listHTML += `
        <div class="bundle-product-item-checkbox">
          <input type="checkbox" class="bundle-checkbox" id="custom-${product.id}" 
                 ${product.checked ? 'checked' : ''} data-original-id="${product.id}"
                 onchange="updateBundlePrices()">
          <div class="bundle-product-info">
            <h4 class="bundle-product-name ${product.isThisItem ? 'this-item' : ''}">${product.name}</h4>
            <div class="bundle-product-details">
              ${variantHTML.replace('<select class="bundle-variant-select"', '<select class="bundle-variant-select" onchange="updateBundlePrices()"')}
              <div class="bundle-product-price">${priceHTML}</div>
            </div>
          </div>
        </div>
      `;
    });
    
    productList.innerHTML = listHTML;
  }
  
  // Update pricing
  updateBundlePricing();
  }
  
  function setupBundleEventListeners() {
  if (!bundleData) return;
  
  // Checkbox change listeners - sync with LIVE original elements
  document.querySelectorAll('.bundle-checkbox').forEach(checkbox => {
    console.log('Adicionando event listener para checkbox:', checkbox.id);
    checkbox.addEventListener('change', function() {
      console.log('Checkbox change detectado:', this.id, 'checked:', this.checked);
      const originalId = this.getAttribute('data-original-id');
      
      // Find the LIVE original checkbox (not the cloned one)
      const liveOriginalCheckbox = originalBundleElement.querySelector(`#${originalId}`);
      
      // Força atualização dos preços imediatamente
      forceUpdateBundlePricing();
      
      // Tenta sincronizar com o original (opcional)
      if (liveOriginalCheckbox) {
        liveOriginalCheckbox.checked = this.checked;
        const changeEvent = new Event('change', { bubbles: true });
        liveOriginalCheckbox.dispatchEvent(changeEvent);
        console.log(`Checkbox ${originalId} synced with live original:`, this.checked);
      } else {
        console.error(`Live original checkbox ${originalId} not found`);
      }
    });
  });
  
  // Variant select listeners - sync with LIVE original elements
  document.querySelectorAll('.bundle-variant-select').forEach(select => {
    console.log('Adicionando event listener para select:', select.dataset.productId);
    select.addEventListener('change', function() {
      console.log('Select change detectado:', this.dataset.productId, 'value:', this.value);
      const productId = this.getAttribute('data-product-id');
      
      // Find the LIVE original select (not the cloned one)
      const liveOriginalSelect = originalBundleElement.querySelector(`li:has(#${productId}) select, li:has([data-original-id="${productId}"]) select`);
      
      // Força atualização dos preços imediatamente
      forceUpdateBundlePricing();
      
      // Tenta sincronizar com o original (opcional)
      if (liveOriginalSelect) {
        const selectedOption = this.options[this.selectedIndex];
        const variantId = selectedOption.value;
        
        // Update LIVE original select
        Array.from(liveOriginalSelect.options).forEach(option => {
          if (option.getAttribute('data-variant-id') === variantId) {
            option.selected = true;
          }
        });
        
        const changeEvent = new Event('change', { bubbles: true });
        liveOriginalSelect.dispatchEvent(changeEvent);
        console.log(`Variant select ${productId} synced with live original:`, variantId);
      } else {
        console.error(`Live original select for product ${productId} not found`);
      }
    });
  });
  }
  
  function updateBundlePricing() {
  if (!bundleData) return;
  
  const priceElement = document.getElementById('bundle-price');
  const originalPriceElement = document.getElementById('bundle-original-price');
  const savingsElement = document.getElementById('bundle-savings-text');
  
  if (priceElement) priceElement.textContent = bundleData.totalPrice;
  if (originalPriceElement) originalPriceElement.textContent = bundleData.totalOriginalPrice;
  
  // Calculate savings
  if (bundleData.totalPrice && bundleData.totalOriginalPrice) {
    const currentPrice = parseFloat(bundleData.totalPrice.replace(/[^0-9.]/g, ''));
    const originalPrice = parseFloat(bundleData.totalOriginalPrice.replace(/[^0-9.]/g, ''));
    const savings = originalPrice - currentPrice;
    
    if (savings > 0 && savingsElement) {
      savingsElement.textContent = `SAVE $${savings.toFixed(2)} TODAY!`;
    }
  }
  }
  
  // Preços fixos do produto (dados estáticos)
  const PRODUCT_PRICES = {
  '42417029840979': { // Midnight
    sale: 199.99,
    compare: 219.99
  },
  '42417029873747': { // Sunrise
    sale: 219.99,
    compare: null
  },
  '31292578431059': { // Bench
    regular: 139.99,
    compare: null
  }
  };
  
  function forceUpdateBundlePricing() {
  console.log('forceUpdateBundlePricing chamada');
  
  let totalPrice = 0;
  let totalOriginalPrice = 0;
  let hasDiscount = false;
  
  // Atualiza preços individuais dos produtos
  const productItems = document.querySelectorAll('.bundle-product-item-checkbox');
  productItems.forEach(item => {
    const checkbox = item.querySelector('.bundle-checkbox');
    const variantSelect = item.querySelector('.bundle-variant-select');
    const priceContainer = item.querySelector('.bundle-product-price');
    
    if (checkbox && priceContainer) {
      const isChecked = checkbox.checked;
      
      if (isChecked) {
        let productId;
        let selectedVariant = null;
        let isMidnight = false;
        
        if (variantSelect) {
          // Produto com variantes
          const selectedOption = variantSelect.options[variantSelect.selectedIndex];
          productId = selectedOption.value;
          selectedVariant = selectedOption.text;
          isMidnight = selectedVariant === 'Midnight';
        } else {
          // Produto sem variantes
          productId = checkbox.getAttribute('data-original-id');
        }
        
        console.log('Processando produto:', productId, 'variant:', selectedVariant, 'isMidnight:', isMidnight);
        
        const priceData = PRODUCT_PRICES[productId];
        if (priceData) {
          // Atualiza preço individual
          let priceHTML = '';
          
          if (priceData.sale) {
            priceHTML += `<span class="sale-price">$${priceData.sale.toFixed(2)}</span>`;
            totalPrice += priceData.sale;
          } else if (priceData.regular) {
            priceHTML += `<span class="regular-price">$${priceData.regular.toFixed(2)}</span>`;
            totalPrice += priceData.regular;
          }
          
          if (priceData.compare && isMidnight) {
            priceHTML += `<span class="compare-price">$${priceData.compare.toFixed(2)}</span>`;
            totalOriginalPrice += priceData.compare;
            hasDiscount = true;
          } else if (priceData.sale) {
            totalOriginalPrice += priceData.sale;
          } else if (priceData.regular) {
            totalOriginalPrice += priceData.regular;
          }
          
          priceContainer.innerHTML = priceHTML;
          console.log('Preço atualizado para produto:', productId, priceHTML);
        }
      }
    }
  });
  
  // Atualiza preços totais
  const priceElement = document.getElementById('bundle-price');
  const originalPriceElement = document.getElementById('bundle-original-price');
  const savingsElement = document.getElementById('bundle-savings-text');
  
  if (priceElement) {
    priceElement.textContent = `$${totalPrice.toFixed(2)}`;
    console.log('Preço total atualizado:', totalPrice);
  }
  
  if (originalPriceElement) {
    if (hasDiscount && totalOriginalPrice > totalPrice) {
      originalPriceElement.textContent = `$${totalOriginalPrice.toFixed(2)}`;
      originalPriceElement.style.display = '';
      console.log('Preço original mostrado:', totalOriginalPrice);
    } else {
      originalPriceElement.style.display = 'none';
      console.log('Preço original escondido');
    }
  }
  
  if (savingsElement) {
    const savings = totalOriginalPrice - totalPrice;
    if (hasDiscount && savings > 0) {
      savingsElement.textContent = `SAVE $${savings.toFixed(2)} TODAY!`;
      savingsElement.style.display = '';
      console.log('Economia mostrada:', savings);
    } else {
      savingsElement.style.display = 'none';
      console.log('Economia escondida');
    }
  }
  }
  
  function updateBundlePricingFromOriginal() {
  // Usa a função forçada em vez da original
  forceUpdateBundlePricing();
  }
  
  function addBundleToCart() {
  console.log('addBundleToCart called');
  
  if (!originalBundleElement) {
    console.error('Original bundle element not found');
    return;
  }
  
  const customButton = document.getElementById('bundle-cta-button');
  const buttonText = document.getElementById('bundle-button-text');
  
  if (!customButton || !buttonText) {
    console.error('Custom button elements not found');
    return;
  }
  
  // Find the LIVE original button
  const liveOriginalButton = originalBundleElement.querySelector('.cbb-frequently-bought-add-button');
  
  if (!liveOriginalButton) {
    console.error('Live original button not found in original bundle element');
    buttonText.textContent = 'Error - Try Again';
    customButton.style.background = '#dc3545';
    setTimeout(() => {
      buttonText.textContent = 'Shop Bundle';
      customButton.style.background = '#EB701F';
      customButton.disabled = false;
      customButton.style.opacity = '1';
    }, 3000);
    return;
  }
  
  console.log('Live original button found, starting process...', liveOriginalButton);
  
  // Update button state
  buttonText.textContent = 'Adding...';
  customButton.disabled = true;
  customButton.style.opacity = '0.7';
  
  // Store original URL to detect navigation
  const originalUrl = window.location.href;
  let navigationDetected = false;
  
  // Method 1: Listen for beforeunload (page leaving)
  const beforeUnloadHandler = () => {
    navigationDetected = true;
    console.log('Navigation detected via beforeunload');
  };
  window.addEventListener('beforeunload', beforeUnloadHandler, { once: true });
  
  // Method 2: Check URL changes
  const urlCheckInterval = setInterval(() => {
    if (window.location.href !== originalUrl) {
      navigationDetected = true;
      clearInterval(urlCheckInterval);
      console.log('Navigation detected via URL change');
    }
  }, 50);
  
  // Click the LIVE original button
  try {
    console.log('Clicking live original button...');
    liveOriginalButton.click();
    console.log('Live original button clicked successfully');
  } catch (error) {
    console.error('Error clicking live original button:', error);
    buttonText.textContent = 'Error - Try Again';
    customButton.style.background = '#dc3545';
    
    // Cleanup
    window.removeEventListener('beforeunload', beforeUnloadHandler);
    clearInterval(urlCheckInterval);
    
    setTimeout(() => {
      buttonText.textContent = 'Shop Bundle';
      customButton.style.background = '#EB701F';
      customButton.disabled = false;
      customButton.style.opacity = '1';
    }, 3000);
    return;
  }
  
  // Wait for navigation or timeout
  let checkCount = 0;
  const maxChecks = 50; // 5 seconds max
  
  const checkInterval = setInterval(() => {
    checkCount++;
    
    // Check if navigation was detected
    if (navigationDetected) {
      clearInterval(checkInterval);
      clearInterval(urlCheckInterval);
      window.removeEventListener('beforeunload', beforeUnloadHandler);
      console.log('Navigation successful, cleaning up');
      return;
    }
    
    // Check if we're on cart page manually
    if (window.location.pathname.includes('/cart')) {
      clearInterval(checkInterval);
      clearInterval(urlCheckInterval);
      window.removeEventListener('beforeunload', beforeUnloadHandler);
      console.log('Already on cart page');
      return;
    }
    
    // Check if original button text changed (indicating success)
    const currentButtonText = liveOriginalButton.textContent.trim().toLowerCase();
    if (currentButtonText.includes('added') || currentButtonText.includes('success') || currentButtonText.includes('view cart')) {
      clearInterval(checkInterval);
      clearInterval(urlCheckInterval);
      window.removeEventListener('beforeunload', beforeUnloadHandler);
      
      console.log('Button text changed to:', currentButtonText, '- likely successful. Waiting for redirect...');
      buttonText.textContent = 'Success! Redirecting...';
      customButton.style.background = '#28a745';
      
      // Wait a bit more for natural redirect, then force if needed
      setTimeout(() => {
        if (!window.location.pathname.includes('/cart')) {
          console.log('No natural redirect detected, forcing redirect to cart');
          window.location.href = '/cart';
        }
      }, 1000);
      return;
    }
    
    // Timeout - something might be wrong, but try redirect anyway
    if (checkCount >= maxChecks) {
      clearInterval(checkInterval);
      clearInterval(urlCheckInterval);
      window.removeEventListener('beforeunload', beforeUnloadHandler);
      
      console.log('Timeout reached, checking final button state and forcing redirect');
      console.log('Final button text:', liveOriginalButton.textContent);
      
      buttonText.textContent = 'Redirecting to Cart...';
      customButton.style.background = '#28a745';
      
      setTimeout(() => {
        window.location.href = '/cart';
      }, 500);
    }
  }, 100);
  }
  
  // Function to hide any remaining bundle elements
  function hideAllBundleElements() {
  // Find all elements that might be related to the bundle app
  const bundleSelectors = [
    '.cbb-frequently-bought-container',
    '.cbb-frequently-bought-title',
    '.cbb-frequently-bought-recommendations-container',
    '.cbb-frequently-bought-form',
    '.cbb-frequently-bought-selector-list',
    '[class*="cbb-frequently-bought"]',
    '[id*="cbb-frequently-bought"]',
    '[class*="cbb-"]',
    '[id*="cbb-"]'
  ];
  
  bundleSelectors.forEach(selector => {
    try {
      const elements = document.querySelectorAll(selector);
      elements.forEach(element => {
        // Skip our hidden container
        if (element.id === 'original-bundle-container' || element.closest('#original-bundle-container')) {
          return;
        }
        
        // Hide element completely
        element.style.setProperty('position', 'absolute', 'important');
        element.style.setProperty('left', '-9999px', 'important');
        element.style.setProperty('top', '-9999px', 'important');
        element.style.setProperty('width', '1px', 'important');
        element.style.setProperty('height', '1px', 'important');
        element.style.setProperty('opacity', '0', 'important');
        element.style.setProperty('visibility', 'hidden', 'important');
        element.style.setProperty('overflow', 'hidden', 'important');
        element.style.setProperty('clip', 'rect(0, 0, 0, 0)', 'important');
        element.style.setProperty('pointer-events', 'none', 'important');
        element.style.setProperty('z-index', '-9999', 'important');
        element.style.setProperty('transform', 'scale(0)', 'important');
        element.style.setProperty('margin', '0', 'important');
        element.style.setProperty('padding', '0', 'important');
        element.style.setProperty('border', 'none', 'important');
        element.style.setProperty('background', 'transparent', 'important');
        element.style.setProperty('max-width', '1px', 'important');
        element.style.setProperty('max-height', '1px', 'important');
        
        console.log('Hidden bundle element:', element);
      });
    } catch (error) {
      // Ignore selector errors
    }
  });
  
  console.log('Bundle elements cleanup completed');
  }
  
  // Função global simples para atualizar preços
  window.updateBundlePrices = function() {
  console.log('updateBundlePrices chamada');
  
  let totalPrice = 0;
  let totalOriginalPrice = 0;
  let hasDiscount = false;
  
  // Preços fixos e imagens
  const prices = {
    '42417029840979': { 
      sale: 199.99, 
      compare: 219.99,
      image: 'https://cdn.shopify.com/s/files/1/2623/4904/files/27.5_120x120.webp?v=1754961420' // Midnight - sinos pretos
    },
    '42417029873747': { 
      sale: 219.99,
      image: 'https://cdn.shopify.com/s/files/1/2623/4904/files/27.5cover_120x120.png?v=1754961420' // Sunrise - sinos coloridos
    },
    '31292578431059': { 
      regular: 139.99,
      image: 'https://cdn.shopify.com/s/files/1/2623/4904/files/DBBench_120x120.png?v=1686016009' // Bench
    }
  };
  
  // Processa cada produto
  document.querySelectorAll('.bundle-product-item-checkbox').forEach(item => {
    const checkbox = item.querySelector('.bundle-checkbox');
    const select = item.querySelector('.bundle-variant-select');
    const priceDiv = item.querySelector('.bundle-product-price');
    
    if (checkbox && checkbox.checked) {
      let productId = checkbox.getAttribute('data-original-id');
      let isMidnight = false;
      
      // Se tem select, usa o valor selecionado
      if (select) {
        productId = select.value;
        isMidnight = select.options[select.selectedIndex].text === 'Midnight';
      }
      
      const price = prices[productId];
      if (price) {
        // Atualiza preço individual
        let html = '';
        if (price.sale) {
          html += `<span class="sale-price">$${price.sale.toFixed(2)}</span>`;
          totalPrice += price.sale;
          totalOriginalPrice += price.sale;
        } else if (price.regular) {
          html += `<span class="regular-price">$${price.regular.toFixed(2)}</span>`;
          totalPrice += price.regular;
          totalOriginalPrice += price.regular;
        }
        
        if (price.compare && isMidnight) {
          html += `<span class="compare-price">$${price.compare.toFixed(2)}</span>`;
          totalOriginalPrice = totalOriginalPrice - price.sale + price.compare;
          hasDiscount = true;
        }
        
        priceDiv.innerHTML = html;
        
        // Atualiza imagem na grid se for o produto com variantes (dumbbell)
        if (select && price.image) {
          const productImages = document.querySelectorAll('.bundle-product-image');
          // Assume que a primeira imagem é sempre do dumbbell (produto principal)
          if (productImages[0]) {
            productImages[0].style.backgroundImage = `url('${price.image}')`;
            console.log('Imagem atualizada para:', price.image);
          }
        }
      }
    }
  });
  
  // Atualiza totais
  const bundlePrice = document.getElementById('bundle-price');
  const bundleOriginal = document.getElementById('bundle-original-price');  
  const bundleSavings = document.getElementById('bundle-savings-text');
  
  if (bundlePrice) bundlePrice.textContent = `$${totalPrice.toFixed(2)}`;
  
  if (bundleOriginal) {
    if (hasDiscount) {
      bundleOriginal.textContent = `$${totalOriginalPrice.toFixed(2)}`;
      bundleOriginal.style.display = '';
    } else {
      bundleOriginal.style.display = 'none';
    }
  }
  
  if (bundleSavings) {
    const savings = totalOriginalPrice - totalPrice;
    if (hasDiscount && savings > 0) {
      bundleSavings.textContent = `SAVE $${savings.toFixed(2)} TODAY!`;
      bundleSavings.style.display = '';
    } else {
      bundleSavings.style.display = 'none';
    }
  }
  
  console.log('Preços atualizados - Total:', totalPrice, 'Original:', totalOriginalPrice, 'Desconto:', hasDiscount);
  };
  
  // Make functions global
  window.addBundleToCart = addBundleToCart;
  window.hideAllBundleElements = hideAllBundleElements;
</script>

{%- schema -%}
  {
    "name": "Custom Bundle",
    "tag": "section",
    "class": "custom-bundle-section",
    "settings": [
      {
        "type": "paragraph",
        "content": "This section automatically detects and replaces bundle apps with a custom design. All content is pulled dynamically from the original app."
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "Top padding",
        "default": 60
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "Bottom padding",
        "default": 60
      }
    ],
    "presets": [
      {
        "name": "Custom Bundle",
        "settings": {
          "padding_top": 60,
          "padding_bottom": 60
        }
      }
    ]
  }
{%- endschema -%}